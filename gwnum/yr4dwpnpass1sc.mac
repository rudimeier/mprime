; Copyright 2011-2012 - Mersenne Research, Inc.  All rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; These macros do the first pass of an AVX primarily radix-4 DJB "r4dwpn" FFT.
;

; ********************************************************
; ********************************************************
; ******************  PASS 1 MACROS  *********************
; ********************************************************
; ********************************************************

;;
;; Estimated memory requirements for each real pass 1 macro:
;;
;; Pass 1 size:			128	256	320	384	448	512	640	768	896	1024	1280	1536	1792	2048	2560	3072	3584	4096
;;
;; FFT data:			16K	32K	40K	48K	56K	64K	80K	96K	112K	128K	160K	192K	224K	256K	320K	384K	448K	512K
;; Scratch size:		16K	32K	40K	48K	56K	64K	80K	96K	112K	128K	160K	192K	224K	256K	320K	384K	448K	512K
;; Variable sin/cos data:	10.75K	21.5K	16.75K	18.75K	20.75K	22.75K	33.5K	37.5K	41.5K	45.5K	32.75K	30.75K	43.5K	45.5K	73K	63K	75K	79K
;; Fixed sin/cos data:		0.75K	1.5K	4.5K	4.5K	6.5K	6K	9K	9K	13K	16K	18K	18K	26K	32K	36K	48K	52K	64K
;; Carry data:			1K	2K	2.5K	3K	3.5K	4K	5K	6K	7K	8K	10K	12K	14K	16K	20K	24K	28K	32K
;; Normalization data:		2.5K	2.5K	6.25K	7.5K	8.75K	10K	6.25K	7.5K	8.75K	10K	25K	60K	17.5K	20K	50K	60K	70K	80K
;; Big/lit flags:		0.5K	1K	1.25K	1.5K	1.75K	2K	2.5K	3K	3.5K	4K	5K	6K	7K	8K	10K	12K	14K	16K
;; Data prefetched early:	8K	16K	26K	32K	42K	40K	52K	64K	84K	80K	139K	131K	172K	175K	32K	0K	128K	0K
;;
;; Min L2 cache size (clm=4):	86K	165.5K	189.25K	216K	252.75K	283K	366K	417K	488K	550K	611K	723K	879.5K	928K	1234K	1398K	1758K	1858K
;;     L2 cache size (clm=2):		86K	103.13K	117.75K	138.38K	154.5K	193.75K	220.5K	259.25K	293K	327K	400.5K	461.5K	488.5K	660K	753K	940K	999K
;;     L2 cache size (clm=1):		46.25K	60K	68.63K	81.25K	90.25K	107.63K	122.25K	144.88K	164.5K	185K	239.25K	252.5K	270.25K	373K	430.5K	531K	571.5K
;;
;; NOTE:  To calculate the minimum efficient L2 cache size, we double the
;; data and variable sin/cos data sizes as both the current data
;; and next block data will be in the cache at the same time.  Any data
;; prefetched early (during the inverse FFT process) runs the danger of
;; pushing out the fixed sin/cos data and normalization data because of the
;; LRU cache-eviction algorithm.  The L2 cache size formula is:
;;	(FFT data size + Variable sin/cos data) * 2 +
;;	(Scratch size + Fixed sin/cos data + Normalization data + big/lit data) +
;;	(amount of data prefetched during inverse FFT process)
;; ALSO NOTE:  Numbers above are for clm = 4.  Clm affects the FFT data size,
;; scratch size, variable sin/cos size, big/lit flags, and data prefetched early.

;; Estimated memory requirements for each all-complex pass 1 macro:
;;
;; Pass 1 size:			128	256	384	512	640	768	1024	1280	1536	2048	2560	3072	4096	5120
;;
;; FFT data:			16K	32K	48K	64K	80K	96K	128K	160K	192K	256K	320K	384K	512K	640K
;; Scratch size:		16K	32K	48K	64K	80K	96K	128K	160K	192K	256K	320K	384K	512K	640K
;; Variable sin/cos data:	7.25K	14.5K	11.25K	15.25K	15.25K	22.5K	30.5K	30.5K	23.25K	31K	28K	48K	56K	56K
;; Fixed sin/cos data:		5K	5K	9K	12K	15K	18K	24K	30K	39K	52K	65K	78K	104K	130K
;; Normalization data:		5K	5K	15K	20K	25K	15K	20K	25K	60K	20K	100K	60K	80K	100K
;; Big/lit flags:		0.5K	1K	1.5K	2K	2.5K	3K	4K	5K	6K	8K	10K	12K	16K	20K
;; Data prefetched early:	8K	16K	32K	40K	44K	64K	80K	88K	144K	128K	0K	0K	0K	0K
;;
;; Min L2 cache size (clm=4):	82.5K	147K	205.5K	274K	324.5K	396K	528K	624K	729K	916K	1191K	1398K	1848K	2282K
;;     L2 cache size (clm=2):	46.25K	78.5K	114.75K	153K	182.25K	214.5K	286K	339.5K	414K	494K	678K	768K	1016K	1060K
;;     L2 cache size (clm=1):		44.25K	69.38K	92.5K	111.13K	123.75K	165K	197.25K	256.5K	283K	421.5K	453K	600K	645K


;; Constant to control when we group pass 1 sections.  Sandy Bridge CPUs have a 32KB L1 data cache.
;; We're guessing grouping isn't necessary when pass 1 data is less than 24KB.  We need to tune this!

GROUPING_SIZE = 24*1024 *1000
CLM_GROUPING = 2

;;***********************************************************************
;; Pass 1 macros
;;
;; p2cl = number of 128-byte cache lines processed from a pass 2 block
;; clm = cache line multiplier (num cache lines processed each iteration)
;;***********************************************************************

; Note:  All memory layouts are for 64 byte cache lines.


;; Perform a pass 1 FFT of length 128 doubles.
;; Memory examples are for a 128K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 = 43*clm 64-byte cache lines

yr4dwpn_pass1sc128 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b6b, b7b, b8b, b9b, c0b, c1b, c6b, c7b, c8b, c9b
	LOCAL	pass1, pass2, endlp, done, yes_fft

	set_FFT_constants fftname, 0, 0, 128, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 128K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 15 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 3.75 macros each processing 32 data values

c0b:	start_timer 16
	mov	rbp, DATA_ADDR		;; Get source address
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdx, PREMULT_ADDR	;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]	;; Complex data sin/cos ptr
pfing	lea	rcx, [rdx+(43-16)*clm*64] ;; Finish prefetch the sin/cos/premult data
	yloop_init 4*4*clm		;; 4*4*clm iterations
	yloop_set_prefetch YSINGLE	;; Prefetch 16*clm cache lines
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sine/cosine ptr

	loops_reset
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sine/cosine ptr
	yloop	4, c9b, 0, rdi, clm*YMM_SCD4 ;; Loop, next premult/sin/cos pointer
	yloop	2, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9b, -2*clmblkdst8	;; Loop, restore source pointer
	end_timer 16

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 12 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 3 macros each processing 32 data values

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
	yloop_init 4*4*clm			;; 4*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	2, c7b, -2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...

;; Do 16 eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 4*4*clm		;; 4 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	4, c1b			;; 4 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 16
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 16

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 iterations each processing 32 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, 8*4*blkdst		;; We've already prefetched 8 blocks
	yloop_init 4*4*clm		;; 4 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -4*clmblkdst	;; 4 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 12 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 3 macros each processing 32 data values

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 ;; sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 4*4*clm			;; 4 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7b,	-2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 15 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 3.75 macros each processing 32 data values

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 4*4*clm			;; 4 iters of 4*clm
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_set_prefetch YDOUBLE
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore premult/sine/cosine ptr

	loops_reset
	yloop_set_prefetch YDOUBLE
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore premult/sine/cosine ptr
	yloop	4, b9b, 0, rdi, clm*YMM_SCD4	;; Loop, next premult/sine/cosine pointer
	yloop	2, b9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, b9b				;; Test loop counter
	end_timer 26

;; Work on next 4*clm sets of 128 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 128 doubles.
;; Memory examples are for a 128K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4 = 29*clm 64-byte cache lines

yr4dwpn_pass1sc128ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b7b, b9b, c0b, c1b, c7b, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 128, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 128K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 16 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 4 macros each processing 32 data values

c0b:	start_timer 16
	mov	rbp, DATA_ADDR		;; Get source address
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, PREMULT_ADDR	;; Load premult/sin/cos pointer
pfing	lea	rcx, [rdi+(29-16)*clm*64] ;; Finish prefetching the sin/cos/premult data
	yloop_init 4*4*clm		;; 4*4*clm iterations
	yloop_set_prefetch YSINGLE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos data pointer
	yloop	4, c9b, 0, rdi, clm*YMM_SCD4 ;; Test loop counter, next premult/sin/cos pointer
	yloop	2, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9b, -2*clmblkdst8	;; Loop, restore source pointer
	end_timer 16

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 4 macros each processing 32 data values

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
	yloop_init 4*4*clm			;; 4*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	2, c7b,	-2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...

;; Do 16 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed premultiplier/sin/cos ptr
	yloop_init 4*4*clm		;; 4 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	4, c1b			;; 4 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 16
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 16

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 four_complex_first_fft operations
;;	distance between fft data elements is 16K
;;	do 4 iterations each processing 32 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, 8*4*blkdst		;; We've already prefetched 8 blocks
	yloop_init 4*4*clm		;; 4 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -4*clmblkdst	;; 4 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 16 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 4 macros each processing 32 data values

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCD4
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 4*4*clm			;; 4 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 16 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 4 macros each processing 32 data values

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 4*4*clm			;; 4 iters of 4*clm
	yloop_set_prefetch YSINGLE
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest ptrs, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	2, b9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b9b				;; Test loop counter
	end_timer 26

;; Work on next 4*clm sets of 128 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 256 doubles.
;; Memory examples are for a 256K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 2*4*clm*16 + 2*4*clm*YMM_SCND4 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 = 86*clm 64-byte cache lines

yr4dwpn_pass1sc256 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b6b, b7b, b8b, b9b, c0b, c1b, c6b, c7b, c8b, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 256, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 256K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 6,7,8
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 1 sixteen_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 15 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 3.75 macros each processing 64 data values

c0b:	start_timer 16
	mov	rbp, DATA_ADDR		;; Get source address
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdx, PREMULT_ADDR	;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD4]	;; Complex data sin/cos ptr
pfing	lea	rcx, [rdx+(86-32)*clm*64] ;; Finish prefetch the sin/cos/premult data
	yloop_init 4*4*clm		;; 4*4*clm iterations
	yloop_set_prefetch YDOUBLE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/source ptrs, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YDOUBLE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/source ptrs, restore premult/sine/cosine pointer
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Loop, next dest pointer, next premult/sin/cos pointer
	yloop	4, c9b, -4*clmblkdst8	;; Loop, restore source pointer
	end_timer 16

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 8 eight_reals_unfft operations
;;	distance between fft data elements is 8K
;;	do 2 macro processing 32 data values
;; Do 24 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 6 macros each processing 32 data values

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
	yloop_init 8*4*clm			;; 8*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, c6b, -4*clm*64+clmblkdst	 ;; 4*clm iterations
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	 ;; 4*clm iterations
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, restore sin/cos pointers
	yloop	4, c7b, -4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...

;; Do 32 eight_reals_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 32 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 8*4*clm		;; 8 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	8, c1b			;; 8 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 32
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 32

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	64K	...
;;	...

;; Do 32 eight_reals_fft operations
;;	distance between fft data elements is 32K
;;	do 8 iterations each processing 32 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, 16*4*blkdst	;; We've already prefetched 16 blocks
	yloop_init 8*4*clm		;; 8 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst	;; 8 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 8 eight_reals_fft operations
;;	distance between fft data elements is 8K
;;	do 2 macros each processing 32 data values
;; Do 24 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 6 macros each processing 32 data values

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 ;; sin/cos ptr
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 8*4*clm			;; 8 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; 4*clm iterations
	yloop	2, b6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; 4*clm iterations
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, restore sin/cos ptrs
	yloop	4, b7b,	-4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

;; Do FFT levels 6,7,8
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 sixteen_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 15 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 3.75 macros each processing 64 data values

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD4]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 4*4*clm			;; 4 iters of 4*clm
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_set_prefetch YDOUBLE
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest ptrs, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YDOUBLE
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest ptrs, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Loop, next source pointer, next premult/sine/cosine pointer
	yloop	4, b9b			;; Test loop counter
	end_timer 26

;; Work on next 4*clm sets of 256 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 256 doubles.
;; Memory examples are for a 256K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8 = 58*clm 64-byte cache lines

yr4dwpn_pass1sc256ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b7b, b9b, c0b, c1b, c7b, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 256, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 256K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 6,7,8
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 16 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 4 macros each processing 64 data values

c0b:	start_timer 16
	mov	rbp, DATA_ADDR		;; Get source address
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, PREMULT_ADDR	;; Load premult/sin/cos pointer
pfing	lea	rcx, [rdi+(58-32)*clm*64] ;; Finish prefetching the sin/cos/premult data
	yloop_init 4*4*clm		;; 4*4*clm iterations
	yloop_set_prefetch YDOUBLE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos data pointer
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -4*clmblkdst8	;; Restore source pointer
	end_timer 16

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 8 macros each processing 32 data values

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
	yloop_init 8*4*clm			;; 8*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Loop, restore sin/cos pointers
	yloop	4, c7b,	-4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...

;; Do 32 four_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 32 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed premultiplier/sin/cos ptr
	yloop_init 8*4*clm		;; 8 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b			;; 8 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 32
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 32

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 four_complex_first_fft operations
;;	distance between fft data elements is 32K
;;	do 8 iterations each processing 32 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, 16*4*blkdst	;; We've already prefetched 16 blocks
	yloop_init 8*4*clm		;; 8 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst	;; 8 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 32 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 8 macros each processing 32 data values

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + 4*clm*YMM_SCD8
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 8*4*clm			;; 8 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Loop, restore sin/cos ptrs
	yloop	4, b7b, -4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

;; Do FFT levels 6,7,8
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 16 eight_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 4 macros each processing 64 data values

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 4*4*clm			;; 4 iters of 4*clm
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_set_prefetch YDOUBLE
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

;; Work on next 4*clm sets of 256 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 320 doubles.
;; Memory examples are for a 320K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 10*clm*YMM_SCD4 = 67*clm 64-byte cache lines

yr4dwpn_pass1sc320 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b6b, b7a, b7b, b8b, b9a, b9b, c0b, c1b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 320, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 320K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 39 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 9.75 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 36 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 9 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (40*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 10*4*clm			;; 10*4*clm iterations
	lea	rbx, [rdi+10*clm*YMM_SCD4+4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst, rdi, clm*YMM_SCD4 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	5, c9a, -5*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 10*4*clm			;; 10*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	2, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	5, c9b, -5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 10*4*clm			;; 10*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	5, c7b, -5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K	...

;; Do 16 twenty_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 80 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 4*4*clm		;; 4 iterations of 4*clm
	yloop_set_clm_prefetch YDOUBLE
	yr5_10cl_20_reals_unfft_preload
c1b:	yr5_10cl_20_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iterations
	yloop	4, c1b			;; 4 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 40
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 40

;; Do FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 twenty_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 iterations each processing 80 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, (26-2)*4*blkdst	;; We've already prefetched 26 blocks which will be 2 too many
	yloop_init 4*4*clm		;; 4 iters of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr5_10cl_20_reals_fft_preload
b1b:	yr5_10cl_20_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iters
	yloop	4, b1b, -4*clmblkdst ;; 4 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 36 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 9 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 39 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 9.75 macros each processing 32 data values

IF (40*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD2		;; Complex data sin/cos ptr
	lea	rdx, [rbx+10*clm*YMM_SCD4]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 10*4*clm			;; 10 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 36*clm cache lines
	loops_set_alternate_prefetch_increment 67, (36+39)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Loop, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 39*clm cache lines
	loops_set_alternate_prefetch_increment 67, (36+39)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next src/dest pointer, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	5, b7a				;; Test loop counter

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + clm*YMM_SCD2 + 10*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 10*4*clm			;; 10 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 36*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	5, b7b, -5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-10*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 10*4*clm			;; 10 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 39*clm cache lines
pfing	bump	rcx, (67-36-39)*clm*64		;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	2, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter
	yloop	5, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 320 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 384 doubles.
;; Memory examples are for a 384K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD2 + 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 = 75*clm 64-byte cache lines

yr4dwpn_pass1sc384 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 384, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 384K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 47 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 11.75 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 44 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 11 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 12*4*clm			;; 12*4*clm iterations
	lea	rbx, [rdi+4*clm*YMM_SCD4+4*clm*16] ;; Second sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	4, c9a, -12*4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	12, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	4, c9b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	12, c7b, -12*4*clmblkdst, rdi, 4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 16 six_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 24 data values
;; Do 48 three_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 24 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...

;; Do 48 eight_reals_unfft operations
;;	distance between fft data elements is 48K
;;	do 12 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 16*4*clm			;; 16 or 12 iters of 4*clm

c4a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+12*clmblkdst, rdi, -4*clm*YMM_SCD2 ;; Test loop counter

	loops_reset
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+12*clmblkdst, rdi, -4*clm*YMM_SCD2 ;; Test loop counter
	yloop	4, c5b, -4*12*clmblkdst, rdi, 4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rbx, 4*YMM_SCD3 ;; Test loop counter
	yloop	4, c1b, -3*4*clmblkdst+clmblkdst, rbx, -3*4*YMM_SCD3+YMM_SCD3 ;; 3 iterations!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YHALF
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; 4 iterations, restore sine/cosine pointer
	yloop	4, c5b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 12*4*clm			;; 12 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	12, c1b				;; Test loop counter
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 48
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 48

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 48 eight_reals_fft operations
;;	distance between fft data elements is 48K
;;	do 12 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 six_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 24 data values
;; Do 48 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 32*4*blkdst		;; We've already prefetched 32 blocks

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rbx, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 ;; Create second sin/cos ptr
	yloop_init 16*4*clm			;; 12 or 16 iters of 4*clm

b1a:	start_timer 22
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -3*4*clmblkdst, rdi, -3*4*YMM_SCD3+YMM_SCD3 ;; Loop 3 times!! restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, 4*clmblkdst, rbx, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b4b, -4*clm*64+12*clmblkdst, rbx, -4*clm*YMM_SCD2 ;; 4*clm iterations

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rbx, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+12*clmblkdst, rbx, -4*clm*YMM_SCD2 ;; 4*clm iterations
	yloop	4, b5b, -4*12*clmblkdst+clmblkdst, rbx, 4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx-4*4*clm*YMM_SCD2]	;; Restore sin/cos ptr

ELSE

	start_timer 22
	yloop_init 12*4*clm			;; 12 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	12, b1b, -12*clmblkdst		;; Loop, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b4b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 44 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 11 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 47 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 11.75 macros each processing 32 data values

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	bump	rdi, -4*clm*YMM_SCND4		;; Premultiplier/sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 12*4*clm			;; 12 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 44*clm cache lines
	loops_set_alternate_prefetch_increment 75, (44+47)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 47*clm cache lines
	loops_set_alternate_prefetch_increment 75, (44+47)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	3, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	bump	rdi, -4*clm*YMM_SCND4		;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 12*4*clm			;; 12 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 44*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	12, b7b, -12*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 12*4*clm			;; 12 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest ptrs, restore premult/sine/cosine pointer

	loops_reset
pfing	bump	rcx, (75-44-47)*clm*64		;; Finish prefetch the sin/cos/premult data
	yloop_set_prefetch YSINGLE		;; Prefetch 47*clm cache lines
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest ptrs, restore premult/sine/cosine pointer
	yloop	12, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 384 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 384 doubles.
;; Memory examples are for a 384K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD1 + 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4 = 45*clm 64-byte cache lines

yr4dwpn_pass1sc384ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 384, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 384K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 48 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 12 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 48 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 12 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD4+4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 12*4*clm			;; 12*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointer
	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -12*4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	12, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	12, c7b, -12*4*clmblkdst, rdi, 4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 64 three_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 24 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...

;; Do 48 four_complex_unfft operations
;;	distance between fft data elements is 48K
;;	do 12 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 16*4*clm			;; 16 or 12 iters of 4*clm
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+12*clmblkdst, rdi, -4*clm*YMM_SCD1 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, c5b, -4*12*clmblkdst, rdi, 4*clm*YMM_SCD1 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; 4*clm iterations
	yloop	4, c1b, -3*4*clmblkdst+clmblkdst, rbp, -3*4*YMM_SCD6+YMM_SCD6 ;; Loop 3 times!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c5a				;; Test loop counter, restore source pointer

ELSE

	start_timer 18
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD1 ;; 4 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 12*4*clm			;; 12 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	12, c1b				;; Test loop counter
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 48
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 48

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 48 four_complex_first_fft operations
;;	distance between fft data elements is 48K
;;	do 12 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 64 three_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 32*4*blkdst		;; We've already prefetched 32 blocks

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 16*4*clm			;; 12 or 16 iters of 4*clm
b1a:	start_timer 22
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -3*4*clmblkdst, rdi, -3*4*YMM_SCD6+YMM_SCD6 ;; 3 iterations!! restore source ptr, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rbp, YMM_SCD1, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+12*clmblkdst, rbp, -4*clm*YMM_SCD1 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, b5b, -4*12*clmblkdst+clmblkdst, rbp, 4*clm*YMM_SCD1 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-4*4*clm*YMM_SCD1-4*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 12*4*clm			;; 12 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	12, b1b, -12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD1 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*12*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -4*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 48 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 12 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 48 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 12 macros each processing 32 data values

IF (48*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD4]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 12*4*clm			;; 12 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 24*clm cache lines
	loops_set_alternate_prefetch_increment 45, (24+24)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 4*clm
	end_timer 25

	start_timer 26
	yloop_set_prefetch YHALF		;; Prefetch 24*clm cache lines
	loops_set_alternate_prefetch_increment 45, (24+24)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	3, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 12*4*clm			;; 12 iters of 4*clm
	yloop_set_prefetch YHALF
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	12, b7b, -12*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 12*4*clm			;; 12 iters of 4*clm
pfing	bump	rcx, (45-24-24)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YHALF
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	12, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 384 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 448 doubles.
;; Memory examples are for a 448K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 14*clm*YMM_SCD4 = 83*clm 64-byte cache lines

yr4dwpn_pass1sc448 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b6b, b7a, b7b, b8b, b9a, b9b, c0b, c1b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 448, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 448K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 55 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 13.75 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 52 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 13 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (56*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 14*4*clm			;; 14*4*clm iterations
	lea	rbx, [rdi+14*clm*YMM_SCD4+4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst, rdi, clm*YMM_SCD4 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	7, c9a, -7*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 14*4*clm			;; 14*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	2, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	7, c9b, -7*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 14*4*clm			;; 14*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	7, c7b, -7*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	224K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	220K	...

;; Do 16 twenty_eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 112 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 4*4*clm		;; 4 iterations of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_unfft_preload
c1b:	yr7_14cl_28_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iterations
	yloop	4, c1b			;; 4 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 56
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 56

;; Do FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	224K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	220K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 twenty_eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 iterations each processing 112 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, (42-2)*4*blkdst	;; We've already prefetched 42 blocks which will be 2 too many
	yloop_init 4*4*clm		;; 4 iters of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_fft_preload
b1b:	yr7_14cl_28_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -4*clmblkdst	;; 4 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 52 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 13 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 55 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 13.75 macros each processing 32 data values

IF (56*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD2		;; Complex data sin/cos ptr
	lea	rdx, [rbx+14*clm*YMM_SCD4]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 14*4*clm			;; 14 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 52*clm cache lines
	loops_set_alternate_prefetch_increment 83, (52+55)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 55*clm cache lines
	loops_set_alternate_prefetch_increment 83, (52+55)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	7, b7a				;; Test loop counter

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + clm*YMM_SCD2 + 14*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 14*4*clm			;; 14 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 52*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	7, b7b, -7*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-14*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 14*4*clm			;; 14 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 55*clm cache lines
pfing	bump	rcx, (83-52-55)*clm*64		;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	2, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	7, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 448 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 512 doubles.
;; Memory examples are for a 512K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 = 91*clm 64-byte cache lines

yr4dwpn_pass1sc512 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 512, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 512K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 63 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 15.75 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 60 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 15 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 16*4*clm			;; 16*4*clm iterations
	lea	rbx, [rdi+16*clm*YMM_SCD4+4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst, rdi, clm*YMM_SCD4 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	8, c9a, -8*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	2, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	8, c9b, -8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	8, c7b, -8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 16 eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 32 data values
;; Do 48 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...

;; Do 64 eight_reals_unfft operations
;;	distance between fft data elements is 64K
;;	do 16 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	lea	rbx, [rdi+16*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16*4*clm iterations

c4a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+2*clmblkdst8 ;; Test loop counter

	loops_reset
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+2*clmblkdst8 ;; Test loop counter
	yloop	4, c5b, -4*2*clmblkdst8, rbx, YMM_SCD4 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 18
	loops_undo 4*4*clm

	start_timer 20
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD3 ;; Test loop counter
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	2, c1b, -2*clmblkdst8+clmblkdst, rdi, -4*4*YMM_SCD3+YMM_SCD3 ;; 2 iterations, next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	bump	rdi, 16*YMM_SCD3		;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16*4*clm iterations

	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; 4 iterations, restore sine/cosine pointer
	yloop	4, c5b, -4*2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	bump	rdi, -16*YMM_SCD3		;; Next fixed sine/cosine pointer
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c1b				;; 2 iterations
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 64
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 64

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 eight_reals_fft operations
;;	distance between fft data elements is 64K
;;	do 16 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values
;; Do 48 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 40*4*blkdst		;; We've already prefetched 40 blocks

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+16*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16 iters of 4*clm
b1a:	start_timer 22
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations
	yloop	2, b1b, -2*clmblkdst8, rdi, -4*4*YMM_SCD3+YMM_SCD3 ;; 2 iterations, restore source pointer, next sin/cos ptr
	loops_undo 2*2*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b4b, -4*clm*64+2*clmblkdst8 ;; 4*clm iterations

	loops_reset
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+2*clmblkdst8 ;; 4*clm iterations
	yloop	4, b5b, -4*2*clmblkdst8+clmblkdst, rbx, YMM_SCD4 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer

ELSE

	start_timer 22
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3	;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, b1b, -2*clmblkdst8		;; 2 iterations, restore source pointer
	end_timer 22

	start_timer 24
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	4, b4b, -4*clmblkdst+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 60 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 15 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 63 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 15.75 macros each processing 32 data values

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD2		;; Complex data sin/cos ptr
	lea	rdx, [rbx+16*clm*YMM_SCD4]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 16*4*clm			;; 16 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YHALF		;; Prefetch 30*clm cache lines
	loops_set_alternate_prefetch_increment 91, (30+63)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 63*clm cache lines
	loops_set_alternate_prefetch_increment 91, (30+63)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, b7a				;; Test loop counter

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 30*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, b7b, -8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-16*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 63*clm cache lines
pfing	bump	rcx, (91-30-63)*clm*64		;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	2, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	8, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 512 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 512 doubles.
;; Memory examples are for a 512K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD2 + 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4 = 61*clm 64-byte cache lines

yr4dwpn_pass1sc512ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 512, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 512K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 64 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 16 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 64 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 16 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD4+4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 16*4*clm			;; 16*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointer
	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -8*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	8, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	8, c7b, -8*clmblkdst8, rdi, 4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...

;; Do 64 four_complex_unfft operations
;;	distance between fft data elements is 64K
;;	do 16 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 16*4*clm			;; 16*4*clm iterations
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+2*clmblkdst8, rdi, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, c5b, -4*2*clmblkdst8, rdi, 4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; 4*clm iterations
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations
	yloop	2, c1b, -2*clmblkdst8+clmblkdst, rbp, -4*4*YMM_SCD6+YMM_SCD6 ;; 2 iterations, next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD2 ;; 4 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c1b				;; 2 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 64
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 64

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 four_complex_first_fft operations
;;	distance between fft data elements is 64K
;;	do 16 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 64 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 40*4*blkdst		;; We've already prefetched 40 blocks

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 16*4*clm			;; 16 iters of 4*clm
b1a:	start_timer 22
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations
	yloop	2, b1b, -2*clmblkdst8, rdi, -4*4*YMM_SCD6+YMM_SCD6 ;; 2 iterations, restore source ptr, next sin/cos ptr
	loops_undo 2*2*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rbp, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+2*clmblkdst8, rbp, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, b5b, -4*2*clmblkdst8+clmblkdst, rbp, 4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-4*4*clm*YMM_SCD2-4*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, b1b, -2*clmblkdst8		;; 2 iterations
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*2*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -4*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 64 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 16 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 64 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 16 macros each processing 32 data values

IF (64*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD4]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 32*clm cache lines
	loops_set_alternate_prefetch_increment 61, (32+32)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 4*clm
	end_timer 25

	start_timer 26
	yloop_set_prefetch YHALF		;; Prefetch 32*clm cache lines
	loops_set_alternate_prefetch_increment 61, (32+32)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_prefetch YHALF
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, b7b, -8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm
pfing	bump	rcx, (61-32-32)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YHALF
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	8, b9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 512 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 640 doubles.
;; Memory examples are for a 640K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD4 + 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 = 107*clm 64-byte cache lines

IFDEF INFERIOR
yr4dwpn_pass1sc640 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 640, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 640K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 79 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 19.75 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 76 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 19 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 20*4*clm			;; 20*4*clm iterations
	lea	rbx, [rdi+4*clm*YMM_SCD4+4*clm*16] ;; Second sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	5, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	4, c9a, -20*4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	20, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	4, c9b, -4*20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	20, c7b, -20*4*clmblkdst, rdi, 4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...

;; Do 16 ten_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 40 data values
;; Do 48 five_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 40 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	316K	...

;; Do 80 eight_reals_unfft operations
;;	distance between fft data elements is 80K
;;	do 20 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 32*4*clm			;; 16 or 20 iters of 4*clm

c4a:	start_timer 18
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_csc_ten_reals_unfft_preload
c4b:	yr5_5cl_csc_ten_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, c4b, -4*clm*64+20*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, c5b, -4*clm*64+20*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter
	yloop	8, c5b, -4*20*clmblkdst, rdi, 4*clm*YMM_SCD4 ;; 4 iterations!! Test loop counter, restore source pointer, next sin/cos pointer
	loops_undo 8*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rbx, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rbx, 4*YMM_SCD3 ;; Test loop counter
	yloop	8, c1b, -5*4*clmblkdst+clmblkdst, rbx, -5*4*YMM_SCD3+YMM_SCD3 ;; 5 iterations!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_csc_ten_reals_unfft_preload
c4b:	yr5_5cl_csc_ten_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD4 ;; 4 iterations, restore sine/cosine pointer
	yloop	4, c5b, -4*20*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 20*4*clm			;; 20 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	20, c1b				;; Test loop counter
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 80
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 80

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	316K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...

;; Do 80 eight_reals_fft operations
;;	distance between fft data elements is 80K
;;	do 20 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 ten_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 40 data values
;; Do 48 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 12 macros each processing 40 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 44*4*blkdst		;; We've already prefetched 44 blocks

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rbx, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 ;; Create second sin/cos ptr
	yloop_init 32*4*clm			;; 20 or 16 iters of 4*clm

b1a:	start_timer 22
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -5*4*clmblkdst, rdi, -5*4*YMM_SCD3+YMM_SCD3 ;; Loop 5 times!! restore source pointer, next sin/cos ptr
	loops_undo 8*4*clm
	end_timer 22

	start_timer 24
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_csc_ten_reals_fft_preload
b4b:	yr5_5cl_csc_ten_reals_fft rsi, 64, 4*clmblkdst, rbx, YMM_SCD4, 4*clm
	yloop	4*clm, b4b, -4*clm*64+20*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations

	loops_reset
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, 4*clmblkdst, rbx, YMM_SCD4, 4*clm
	yloop	4*clm, b5b, -4*clm*64+20*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations
	yloop	8, b5b, -4*20*clmblkdst+clmblkdst, rbx, 4*clm*YMM_SCD4 ;; 4 iterations!! next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx-4*4*clm*YMM_SCD4]	;; Restore sin/cos ptr

ELSE

	start_timer 22
	yloop_init 20*4*clm			;; 20 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	20, b1b, -20*clmblkdst		;; Loop, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 4*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_csc_ten_reals_fft_preload
b4b:	yr5_5cl_csc_ten_reals_fft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b4b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD4, 4*clm
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 76 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 19 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 79 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 19.75 macros each processing 32 data values

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	bump	rdi, -4*clm*YMM_SCND4		;; Premultiplier/sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 76*clm cache lines
	loops_set_alternate_prefetch_increment 107, (76+40)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YHALF		;; Prefetch 40*clm cache lines
	loops_set_alternate_prefetch_increment 107, (76+40)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	5, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	bump	rdi, -4*clm*YMM_SCND4		;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 76*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	20, b7b, -20*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 20*4*clm			;; 20 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer

	loops_reset
pfing	bump	rcx, (107-76-40)*clm*64		;; Finish prefetch the sin/cos/premult data
	yloop_set_prefetch YHALF		;; Prefetch 40*clm cache lines
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	20, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 640 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM
ENDIF


;; Perform a pass 1 FFT of length 640 doubles.
;; Memory examples are for a 640K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 2*4*clm*16 + 2*4*clm*YMM_SCND4 + clm*YMM_SCD4 + 10*clm*YMM_SCD8 = 134*clm 64-byte cache lines

yr4dwpn_pass1sc640 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 640, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 640K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 1 sixteen_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 39 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 9.75 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 8 eight_reals_unfft operations
;;	distance between fft data elements is 8K
;;	do 2 macro processing 32 data values
;; Do 72 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 18 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD4]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 20*4*clm			;; 10*4*clm or 20*4*clm iterations
	lea	rbx, [rdi+10*clm*YMM_SCD8+2*4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst, rdi, clm*YMM_SCD8 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; 4*clm iterations, next source ptr, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos pointer
c7c:	end_timer 17

	yloop	10, c9a, -10*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 10*4*clm			;; 10*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8	;; Test loop counter, next dest pointer, next sin/cos pointer
	yloop	10, c9b, -10*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source pointer
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs
	yloop	10, c7b, -10*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K	...

;; Do 32 twenty_reals_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 80 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 8*4*clm		;; 8 iterations of 4*clm
	yloop_set_clm_prefetch YDOUBLE
	yr5_10cl_20_reals_unfft_preload
c1b:	yr5_10cl_20_reals_unfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iterations
	yloop	8, c1b			;; 8 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 80
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 80

;; Do FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 twenty_reals_fft operations
;;	distance between fft data elements is 32K
;;	do 8 iterations each processing 80 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, (52-4)*4*blkdst	;; We've already prefetched 52 blocks which will be 4 too many
	yloop_init 8*4*clm		;; 8 iters of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr5_10cl_20_reals_fft_preload
b1b:	yr5_10cl_20_reals_fft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iters
	yloop	8, b1b, -8*clmblkdst	;; 8 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 8 eight_reals_fft operations
;;	distance between fft data elements is 8K
;;	do 2 macros each processing 32 data values
;; Do 72 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 18 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 sixteen_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 39 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 9.75 macros each processing 64 data values

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rbx+10*clm*YMM_SCD8]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+2*4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 or 10 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 2*4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD4]		;; Real data sin/cos ptr
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 72*clm cache lines
	loops_set_alternate_prefetch_increment 134, (72+78)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
b9a:	yloop_set_prefetch YDOUBLE		;; Prefetch 78*clm cache lines
	loops_set_alternate_prefetch_increment 134, (72+78)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rbx, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	end_timer 26

	yloop	20, b7a				;; 10 iterations!!!

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + clm*YMM_SCD4 + 10*clm*YMM_SCD8 ;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 72*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	10, b7b, -10*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-10*clm*YMM_SCD8 ;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD4]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 10*4*clm			;; 10 iters of 4*clm
pfing	bump	rcx, (134-72-78)*clm*64		;; Finish prefetch the sin/cos/premult data
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YDOUBLE		;; Prefetch 78 cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	yloop	10, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 640 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 640 doubles.
;; Memory examples are for a 640K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD2 + 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4 = 61*clm 64-byte cache lines

yr4dwpn_pass1sc640ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 640, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 640K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 80 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 20 macros each processing 32 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 80 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 20 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD4+4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 20*4*clm			;; 20*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointer
	end_timer 17

	yloop	5, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -20*4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	20, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -4*20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	20, c7b, -20*4*clmblkdst, rdi, 4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...

;; Do 64 five_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 40 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	316K	...

;; Do 80 four_complex_unfft operations
;;	distance between fft data elements is 80K
;;	do 20 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 32*4*clm			;; 16 or 20 iters of 4*clm
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+20*clmblkdst, rdi, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	8, c5b, -4*20*clmblkdst, rdi, 4*clm*YMM_SCD2 ;; 4 iterations!! restore source pointer, next sin/cos ptr
	loops_undo 8*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -5*4*clmblkdst+clmblkdst, rbp, -5*4*YMM_SCD6+YMM_SCD6 ;; 5 iterations!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	4, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; 4 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 20*4*clm			;; 20 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	20, c1b				;; Test loop counter
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 80
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 80

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	320K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	316K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...

;; Do 80 four_complex_first_fft operations
;;	distance between fft data elements is 80K
;;	do 20 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	80K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	76K	...
;;	160K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 64 five_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 16 macros each processing 40 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 44*4*blkdst		;; We've already prefetched 44 blocks

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 32*4*clm			;; 20 or 16 iters of 4*clm
b1a:	start_timer 22
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+4*clmblkdst, rdi, 4*YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -5*4*clmblkdst, rdi, -5*4*YMM_SCD6+YMM_SCD6 ;; 5 iterations!! restore source ptr, next sin/cos ptr
	loops_undo 8*4*clm
	end_timer 22

	start_timer 24
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, 4*clmblkdst, rbp, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+20*clmblkdst, rbp, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	8, b5b, -4*20*clmblkdst+clmblkdst, rbp, 4*clm*YMM_SCD2 ;; 4 iterations!! next source pointer, next sin/cos ptr
	end_timer 24

	yloop	4, b1a, -4*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-4*4*clm*YMM_SCD2-4*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 20*4*clm			;; 20 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 20*clmblkdst, 40*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	20, b1b, -20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND2 + 4*clm*YMM_SCD4
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, b5b, -4*clmblkdst+20*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*20*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -4*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 80 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 20 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 80 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 20 macros each processing 32 data values

IF (80*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD4]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 40*clm cache lines
	loops_set_alternate_prefetch_increment 61, (40+40)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer. restore sin/cos ptrs
	loops_undo 4*clm
	end_timer 25

	start_timer 26
	yloop_set_prefetch YHALF		;; Prefetch 40*clm cache lines
	loops_set_alternate_prefetch_increment 61, (40+40)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	5, b7a				;; Test loop counter
	bump	rbx, clm*YMM_SCD4		;; Next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 20*4*clm			;; 20 iters of 4*clm
	yloop_set_prefetch YHALF
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	20, b7b, -20*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-4*clm*YMM_SCD4	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 20*4*clm			;; 20 iters of 4*clm
pfing	bump	rcx, (61-40-40)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YHALF
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	20, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 640 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 768 doubles.
;; Memory examples are for a 768K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 8*4*clm*YMM_SCD2 + 2*4*clm*16 + 2*4*clm*YMM_SCND4 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 = 150*clm 64-byte cache lines

yr4dwpn_pass1sc768 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 768, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 768K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 1 sixteen_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 47 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 11.75 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 8 eight_reals_unfft operations
;;	distance between fft data elements is 8K
;;	do 2 macro processing 32 data values
;; Do 88 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 22 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD4]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 24*4*clm			;; 12*4*clm or 24*4*clm iterations
	lea	rbx, [rdi+4*clm*YMM_SCD8+2*4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; 4*clm iterations, next source ptr, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos pointer
c7c:	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD8	;; Test loop counter
	yloop	4, c9a, -12*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+2*4*clm*YMM_SCND4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	3, c9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next sin/cos pointer
	yloop	4, c9b, -12*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 24*4*clm			;; 24*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source pointer
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs
	yloop	12, c7b, -12*clmblkdst8, rdi, 2*4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...

;; Do 32 six_reals_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macro processing 24 data values
;; Do 96 three_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 24 macros each processing 24 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	384K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	380K	...

;; Do 96 eight_reals_unfft operations
;;	distance between fft data elements is 96K
;;	do 24 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 32*4*clm			;; 32 or 24 iters of 4*clm

c4a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+3*clmblkdst8, rdi, -4*clm*YMM_SCD2 ;; Test loop counter

	loops_reset
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+3*clmblkdst8, rdi, -4*clm*YMM_SCD2 ;; Test loop counter
	yloop	4, c5b, -4*3*clmblkdst8, rdi, 4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rbx, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst8, rbx, 8*YMM_SCD3 ;; Test loop counter
	yloop	4, c1b, -3*clmblkdst8+clmblkdst, rbx, -3*8*YMM_SCD3+YMM_SCD3 ;; 3 iterations!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	8, c4a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YHALF
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, c4b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, c5b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; 4 iterations, restore sine/cosine pointer
	yloop	4, c5b, -4*3*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 24*4*clm			;; 24 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next source ptr
	yloop	3, c1b				;; Test loop counter
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 96
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 96

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	384K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	380K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...

;; Do 96 eight_reals_fft operations
;;	distance between fft data elements is 96K
;;	do 24 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 six_reals_fft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 24 data values
;; Do 96 four_complex_fft operations
;;	distance between fft data elements is 32K
;;	do 24 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 64*4*blkdst		;; We've already prefetched 64 blocks

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rbx, 8*clm*16 + 8*clm*YMM_SCND4 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 ;; Create second sin/cos ptr
	yloop_init 32*4*clm			;; 24 or 32 iters of 4*clm

b1a:	start_timer 22
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD3 ;; 4*clm iters
	yloop	4, b1b, -3*clmblkdst8, rdi, -3*8*YMM_SCD3+YMM_SCD3 ;; Loop 3 times!! restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, clmblkdst8, rbx, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b4b, -4*clm*64+3*clmblkdst8, rbx, -4*clm*YMM_SCD2 ;; 4*clm iterations

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, clmblkdst8, rbx, YMM_SCD2, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+3*clmblkdst8, rbx, -4*clm*YMM_SCD2 ;; 4*clm iterations
	yloop	4, b5b, -4*3*clmblkdst8+clmblkdst, rbx, 4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	8, b1a, -8*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbx-8*4*clm*YMM_SCD2]	;; Restore sin/cos ptr

ELSE

	start_timer 22
	yloop_init 24*4*clm			;; 24 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8	;; Loop, next source pointer
	yloop	3, b1b, -3*clmblkdst8		;; Loop, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 8*clm*16 + 8*clm*YMM_SCND4 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 ;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32 iterations of 4*clm
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, b4b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, b5b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*3*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 8 eight_reals_fft operations
;;	distance between fft data elements is 8K
;;	do 2 macros each processing 32 data values
;; Do 72 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 18 macros each processing 32 data values

;; Do FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 sixteen_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 47 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 11.75 macros each processing 64 data values

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rbx+4*clm*YMM_SCD8]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+2*4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 24*4*clm			;; 24 or 12 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 2*4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD4]		;; Real data sin/cos ptr
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 88*clm cache lines
	loops_set_alternate_prefetch_increment 150, (88+94)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
b9a:	yloop_set_prefetch YDOUBLE		;; Prefetch 94*clm cache lines
	loops_set_alternate_prefetch_increment 150, (88+94)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	end_timer 26

	yloop	6, b7a, 0, rbx, clm*YMM_SCD8	;; 3 iterations!!!  Next premult/sine/cosine pointer
	yloop	4, b7a				;; 4 iterations

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + clm*YMM_SCD4 + 4*clm*YMM_SCD8 ;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 24*4*clm			;; 24 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 88*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	12, b7b, -12*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD4]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 12*4*clm			;; 12 iters of 4*clm
pfing	bump	rcx, (150-88-94)*clm*64		;; Finish prefetch the sin/cos/premult data
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YDOUBLE		;; Prefetch 94 cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	3, b9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 768 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 768 doubles.
;; Memory examples are for a 768K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 8*4*clm*YMM_SCD1 + 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8 = 90*clm 64-byte cache lines

yr4dwpn_pass1sc768ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 768, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 768K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 48 four_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 12 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 96 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 24 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD8+2*4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 24*4*clm			;; 12*4*clm or 24*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointer
	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -12*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+2*4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 12*4*clm			;; 12*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	3, c9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -12*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 24*4*clm			;; 24*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointers
	yloop	12, c7b, -12*clmblkdst8, rdi, 2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...

;; Do 128 three_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 24 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	384K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	380K	...

;; Do 96 four_complex_unfft operations
;;	distance between fft data elements is 96K
;;	do 24 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 32*4*clm			;; 32 or 24 iters of 4*clm
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+3*clmblkdst8, rdi, -4*clm*YMM_SCD1 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, c5b, -4*3*clmblkdst8, rdi, 4*clm*YMM_SCD1 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst8, rbp, 8*YMM_SCD6 ;; 4*clm iterations
	yloop	4, c1b, -3*clmblkdst8+clmblkdst, rbp, -3*8*YMM_SCD6+YMM_SCD6 ;; Loop 3 times!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	8, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YHALF
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, c5b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD1 ;; 8 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*3*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 24*4*clm			;; 24 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8	;; Test loop counter
	yloop	3, c1b				;; Test loop counter
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 96
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 96

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	384K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	380K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...

;; Do 96 four_complex_first_fft operations
;;	distance between fft data elements is 96K
;;	do 24 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	96K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	92K	...
;;	192K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 128 three_complex_fft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 64*4*blkdst		;; We've already prefetched 64 blocks

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 32*4*clm			;; 24 or 32 iters of 4*clm
b1a:	start_timer 22
	yloop_adjust 4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, b1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -3*clmblkdst8, rdi, -3*8*YMM_SCD6+YMM_SCD6 ;; 3 iterations!! restore source ptr, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, clmblkdst8, rbp, YMM_SCD1, 4*clm, L1PREFETCH_ALL, clmblkdst
	yloop	4*clm, b5b, -4*clm*64+3*clmblkdst8, rbp, -4*clm*YMM_SCD1 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, b5b, -4*3*clmblkdst8+clmblkdst, rbp, 4*clm*YMM_SCD1 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	8, b1a, -8*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-8*4*clm*YMM_SCD1-2*4*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 24*4*clm			;; 24 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 3*clmblkdst8, 6*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	3, b1b, -3*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_clm_prefetch YQUARTER
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, clmblkdst8, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, b5b, -8*clmblkdst+3*clmblkdst8, rdi, -8*4*clm*YMM_SCD1 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*3*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -2*4*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 96 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 24 macros each processing 32 data values

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 48 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 12 macros each processing 64 data values

IF (96*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD8]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 24*4*clm			;; 24 or 12 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 48*clm cache lines
	loops_set_alternate_prefetch_increment 90, (48+48)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YSINGLE		;; Prefetch 48*clm cache lines
	loops_set_alternate_prefetch_increment 90, (48+48)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	end_timer 26

	yloop	6, b7a, 0, rbx, clm*YMM_SCD8	;; 3 iterations!!!  Next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 24*4*clm			;; 24 iters of 4*clm
	yloop_set_prefetch YHALF		;; Prefetch 48*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	12, b7b, -12*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 12*4*clm			;; 16 iters of 4*clm
pfing	bump	rcx, (90-48-48)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YSINGLE		;; Prefetch 48*clm cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	3, b9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 768 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 896 doubles.
;; Memory examples are for a 896K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 2*4*clm*16 + 2*4*clm*YMM_SCND4 + clm*YMM_SCD4 + 14*clm*YMM_SCD8 = 166*clm 64-byte cache lines

yr4dwpn_pass1sc896 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1b, b6b, b7a, b7b, b8b, b9a, b9b, c0b, c1b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 896, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 896K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 1 sixteen_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 55 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 13.75 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 8 eight_reals_unfft operations
;;	distance between fft data elements is 8K
;;	do 2 macro processing 32 data values
;; Do 104 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 26 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD4]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (112*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 28*4*clm			;; 14*4*clm or 28*4*clm iterations
	lea	rbx, [rdi+14*clm*YMM_SCD8+2*4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst, rdi, clm*YMM_SCD8 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; 4*clm iterations, next source ptr, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos pointer
c7c:	end_timer 17

	yloop	14, c9a, -14*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 14*4*clm			;; 14*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8	;; Test loop counter, next dest pointer, next sin/cos pointer
	yloop	14, c9b, -14*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 28*4*clm			;; 28*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source pointer
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YDOUBLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst ;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs
	yloop	14, c7b, -14*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	448K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	444K	...

;; Do 32 twenty_eight_reals_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 112 data values

	start_timer 20
	mov	rdi, sincos2		;; Load fixed sin/cos data ptr
	yloop_init 8*4*clm		;; 8 iterations of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_unfft_preload
c1b:	yr7_14cl_28_reals_unfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iterations
	yloop	8, c1b			;; 8 iterations
	end_timer 20

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 112
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 112

;; Do FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	448K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	444K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 twenty_eight_reals_fft operations
;;	distance between fft data elements is 32K
;;	do 8 iterations each processing 112 data values

yes_fft:start_timer 22
	mov	rsi, scratch_area	;; Get address of scratch area
	mov	rdi, sincos2		;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs		;; Init prefetching pointers
pfing	bump	rcx, (84-4)*4*blkdst	;; We've already prefetched 84 blocks which will be 4 too many
	yloop_init 8*4*clm		;; 8 iters of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_fft_preload
b1b:	yr7_14cl_28_reals_fft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst	;; 4 iterations, restore source pointer
	end_timer 22

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 8 eight_reals_fft operations
;;	distance between fft data elements is 8K
;;	do 2 macros each processing 32 data values
;; Do 104 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 26 macros each processing 32 data values

;; Do FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 sixteen_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 55 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 13.75 macros each processing 64 data values

IF (112*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rbx+14*clm*YMM_SCD8]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+2*4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 28*4*clm			;; 28 or 14 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YSINGLE		;; Prefetch 8*clm cache lines
	loops_set_alternate_prefetch_increment 165, (8+104+55)
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 2*4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD4]		;; Real data sin/cos ptr
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 104*clm cache lines
	loops_set_alternate_prefetch_increment 165, (8+104+55)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, clmblkdst8
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 55*clm cache lines
	loops_set_alternate_prefetch_increment 165, (8+104+55)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rbx, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	end_timer 26

	yloop	28, b7a				;; 14 iterations!!!

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + clm*YMM_SCD4 + 14*clm*YMM_SCD8 ;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 28*4*clm			;; 28 iterations of 4*clm
	yloop_set_prefetch YSINGLE		;; Prefetch 8*clm cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 104*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	14, b7b, -14*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-14*clm*YMM_SCD8 ;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD4]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 14*4*clm			;; 14 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 55*clm cache lines
pfing	bump	rcx, (166-8-104-55)*clm*64	;; Finish prefetch the sin/cos/premult data
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	yloop	14, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 896 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 1024 doubles.
;; Memory examples are for a 1024K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 2*4*clm*16 + 2*4*clm*YMM_SCND4 + clm*YMM_SCD4 + 16*clm*YMM_SCD8 = 182*clm 64-byte cache lines

yr4dwpn_pass1sc1024 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 1024, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1024K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 1 sixteen_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 63 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 15.75 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 8 eight_reals_unfft operations
;;	distance between fft data elements is 8K
;;	do 2 macro processing 32 data values
;; Do 120 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 30 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD4]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 32*4*clm			;; 16*4*clm or 32*4*clm iterations
	lea	rbx, [rdi+16*clm*YMM_SCD8+2*4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst, rdi, clm*YMM_SCD8 ;; Test loop counter, restore scratch area pointer, next sin/cos pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; 4*clm iterations, next source ptr, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos pointer
c7c:	end_timer 17

	yloop	16, c9a, -16*clmblkdst8		;; Test loop counter, restore source pointer

ELSE

	start_timer 16
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr8_sg8cl_2sc_sixteen_reals_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8	;; Test loop counter, next dest pointer, next sin/cos pointer
	yloop	16, c9b, -16*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source pointer
	yloop	2, c6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Loop, next source ptr, restore sin/cos ptrs
	yloop	16, c7b, -16*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...

;; Do 32 eight_reals_unfft operations
;;	distance between fft data elements is 32K
;;	do 8 macro processing 32 data values
;; Do 96 four_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 24 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	512K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	508K	...

;; Do 128 eight_reals_unfft operations
;;	distance between fft data elements is 128K
;;	do 32 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	lea	rbx, [rdi+32*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32*4*clm iterations

c4a:	start_timer 18
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst8, 2*clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+4*clmblkdst8 ;; Test loop counter

	loops_reset
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst8, 2*clmblkdst8, rbx, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+4*clmblkdst8 ;; Test loop counter
	yloop	4, c5b, -4*4*clmblkdst8, rbx, YMM_SCD4 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 18
	loops_undo 4*4*clm

	start_timer 20
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD3 ;; Test loop counter
	yloop	4, c1b, -4*clmblkdst8+clmblkdst, rdi, -4*8*YMM_SCD3+YMM_SCD3 ;; 4 iterations, next source pointer, next sin/cos ptr
	end_timer 20

	yloop	8, c4a				;; Test loop counter

ELSE

	start_timer 18
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	bump	rdi, 32*YMM_SCD3		;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32*4*clm iterations

	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, c4b, -8*clmblkdst+4*clmblkdst8, rdi, -8*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, c5b, -8*clmblkdst+4*clmblkdst8, rdi, -8*YMM_SCD4 ;; 8 iterations, restore sine/cosine pointer
	yloop	4, c5b, -4*4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	bump	rdi, -32*YMM_SCD3		;; Next fixed sine/cosine pointer
	yloop_init 32*4*clm			;; 32 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	4, c1b				;; 4 iterations
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 128
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 128

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	512K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	508K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...

;; Do 128 eight_reals_fft operations
;;	distance between fft data elements is 128K
;;	do 32 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 32 eight_reals_fft operations
;;	distance between fft data elements is 32K
;;	do 8 macros each processing 32 data values
;; Do 96 four_complex_fft operations
;;	distance between fft data elements is 32K
;;	do 24 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 80*4*blkdst		;; We've already prefetched 80 blocks

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+32*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32 iters of 4*clm
b1a:	start_timer 22
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD3 ;; 4*clm iters, next source ptr, next sin/cos ptr
	yloop	4, b1b, -4*clmblkdst8, rdi, -4*8*YMM_SCD3+YMM_SCD3 ;; 4 iterations, restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst8, 2*clmblkdst8, rbx, 0, 4*clm
	yloop	4*clm, b4b, -4*clm*64+4*clmblkdst8 ;; 4*clm iterations

	loops_reset
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst8, 2*clmblkdst8, rbx, 0, 4*clm
	yloop	4*clm, b5b, -4*clm*64+4*clmblkdst8 ;; 4*clm iterations
	yloop	4, b5b, -4*4*clmblkdst8+clmblkdst, rbx, YMM_SCD4 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	8, b1a, -8*clmblkdst		;; Test loop counter, restore source pointer

ELSE

	start_timer 22
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3	;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	4, b1b, -4*clmblkdst8		;; 4 iterations, restore source pointer
	end_timer 22

	start_timer 24
	yloop_init 32*4*clm			;; 32 iterations of 4*clm
	yloop_set_clm_prefetch YHALF
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, b4b, -8*clmblkdst+4*clmblkdst8, rdi, -8*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, b5b, -8*clmblkdst+4*clmblkdst8, rdi, -8*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 8 eight_reals_fft operations
;;	distance between fft data elements is 8K
;;	do 2 macros each processing 32 data values
;; Do 120 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 30 macros each processing 32 data values

;; Do FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 sixteen_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 64 data values
;; Do 63 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 15.75 macros each processing 64 data values

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbx, PREMULT_ADDR		;; Real data sin/cos ptr
	bump	rbx, clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rbx+16*clm*YMM_SCD8]	;; Premultiplier/sin/cos ptr
	lea	rdi, [rdx+2*4*clm*16]		;; Premultiplier/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 32*4*clm			;; 32 or 16 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 2*4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD4]		;; Real data sin/cos ptr
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YSINGLE		;; Prefetch 120*clm cache lines
	loops_set_alternate_prefetch_increment 165, (120+63)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
b9a:	yloop_set_prefetch YSINGLE		;; Prefetch 63*clm cache lines
	loops_set_alternate_prefetch_increment 165, (120+63)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rbx, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	end_timer 26

	yloop	32, b7a				;; 16 iterations!!!

ELSE

	start_timer 25
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 2*4*clm*16 + clm*YMM_SCD4 + 16*clm*YMM_SCD8 ;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 32*4*clm			;; 32 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+clmblkdst	;; Test loop counter, next source ptr
	yloop	2, b6b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 120*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	16, b7b, -16*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-16*clm*YMM_SCD8 ;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD4]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm
pfing	bump	rcx, (182-120-64)*clm*64	;; Finish prefetch the sin/cos/premult data
	yloop_set_prefetch YSINGLE		;; Prefetch 1*clm cache lines
b8b:	yr8_sg8cl_2sc_sixteen_reals_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, rdx, YMM_SCD4, clm
	yloop	clm, b8b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YSINGLE		;; Prefetch 63*clm cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8, rdi, clm*YMM_SCD8 ;; Test loop counter, next source pointer, next premult/sine/cosine pointer
	yloop	16, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1024 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 1024 doubles.
;; Memory examples are for a 1024K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 8*4*clm*YMM_SCD2 + 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8 = 122*clm 64-byte cache lines

yr4dwpn_pass1sc1024ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 1024, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1024K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 64 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 16 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 128 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 32 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD8+2*4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 32*4*clm			;; 16*4*clm or 32*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointer
	end_timer 17

	yloop	4, c9a, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -16*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+2*4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 16*4*clm			;; 16*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	4, c9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -16*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointers
	yloop	16, c7b, -16*clmblkdst8, rdi, 2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...

;; Do 128 four_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	512K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	508K	...

;; Do 128 four_complex_unfft operations
;;	distance between fft data elements is 128K
;;	do 32 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 32*4*clm			;; 32*4*clm iterations
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+4*clmblkdst8, rdi, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, c5b, -4*4*clmblkdst8, rdi, 4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 18

	start_timer 20
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst8, rbp, 8*YMM_SCD6 ;; 4*clm iterations
	yloop	4, c1b, -4*clmblkdst8+clmblkdst, rbp, -4*8*YMM_SCD6+YMM_SCD6 ;; 4 iterations, next source pointer, next sin/cos ptr
	end_timer 20

	yloop	8, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YHALF
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, c5b, -8*clmblkdst+4*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; 8 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 32*4*clm			;; 32 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	4, c1b				;; 4 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 128
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 128

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	512K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	508K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...

;; Do 128 four_complex_first_fft operations
;;	distance between fft data elements is 128K
;;	do 32 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	128K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	124K	...
;;	256K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 128 four_complex_fft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 80*4*blkdst		;; We've already prefetched 80 blocks

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 8*clm*16 + 8*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 32*4*clm			;; 32 iters of 4*clm
b1a:	start_timer 22
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	4, b1b, -4*clmblkdst8, rdi, -4*8*YMM_SCD6+YMM_SCD6 ;; 4 iterations, restore source ptr, next sin/cos ptr
	loops_undo 4*4*clm
	end_timer 22

	start_timer 24
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst8, 2*clmblkdst8, rbp, YMM_SCD2, 4*clm
	yloop	4*clm, b5b, -4*clm*64+4*clmblkdst8, rbp, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	4, b5b, -4*4*clmblkdst8+clmblkdst, rbp, 4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, next sin/cos ptr
	end_timer 24

	yloop	8, b1a, -8*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-8*4*clm*YMM_SCD2-8*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 4*clmblkdst8, 8*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	4, b1b, -4*clmblkdst8		;; 4 iterations
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 8*clm*16 + 8*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_clm_prefetch YHALF
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst8, 2*clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, b5b, -8*clmblkdst+4*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*4*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -8*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 128 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 32 macros each processing 32 data values

;; Do FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 64 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 16 macros each processing 64 data values

IF (128*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD8]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 32*4*clm			;; 32 or 16 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 64*clm cache lines
	loops_set_alternate_prefetch_increment 122, (64+64)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YSINGLE		;; Prefetch 64*clm cache lines
	loops_set_alternate_prefetch_increment 122, (64+64)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	end_timer 26

	yloop	8, b7a, 0, rbx, clm*YMM_SCD8	;; 4 iterations!!!  Next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_prefetch YHALF		;; Prefetch 64*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	16, b7b, -16*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 16*4*clm			;; 16 iters of 4*clm
pfing	bump	rcx, (122-64-64)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YSINGLE		;; Prefetch 64*clm cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	4, b9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1024 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 1280 doubles.
;; Memory examples are for a 1280K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD4 + 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 10*clm*YMM_SCD4 = 131*clm 64-byte cache lines

yr4dwpn_pass1sc1280 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b2b, b3b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c2b, c3b, c4a, c4b, c5b, c6b, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 1280, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1280K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 159 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 39.75 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 156 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 39 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 40*4*clm			;; 40*4*clm iterations
	lea	rbx, [rdi+10*clm*YMM_SCD4+4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7b				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	10, c9a, -20*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 40*4*clm			;; 40*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	8, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	10, c9b, -20*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 40*4*clm			;; 40*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	20, c7b, -20*clmblkdst8, rdi, 4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 16 eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 32 data values
;; Do 144 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 36 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	640K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K	...

;; Do 64 twenty_reals_unfft operations
;;	distance between fft data elements is 64K
;;	do 16 macros each processing 80 data values

;; Process data in small chunks for more L1 data cache hits

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 64*4*clm			;; 40*4*clm or 16*4*clm iterations

c4a:	start_timer 18
	yloop_adjust 6*4			;; Do 40 rather than 64 iterations in this loop
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c4b, -4*64+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -10*2*clmblkdst8, rdi, 4*YMM_SCD4 ;; 10 iterations!!  Restore source pointer, next sin/cos pointer
	loops_undo 16*4
	end_timer 18

	start_timer 20
	yloop_adjust 12*4			;; Do 16 rather than 64 iterations in this loop
	yloop_set_clm_prefetch YQUAD
	yr5_10cl_20_reals_unfft_preload
c1b:	yr5_10cl_20_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD9 ;; Test loop counter, next sin/cos ptr
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, c1b, -2*clmblkdst8+4*64, rbp, -4*4*YMM_SCD9 ;; 2 iterations!!  Next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c4a, -clm*4*64+clmblkdst, rbp, YMM_SCD9 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 40*4*clm			;; 40*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c4b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD4 ;; 4 iterations, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c5b:	yr4_4cl_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD4 ;; 4 iterations, restore sin/cos pointer
	yloop	10, c5b, -10*2*clmblkdst8	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr5_10cl_20_reals_unfft_preload
c1b:	yr5_10cl_20_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c1b				;; 2 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 160
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 160

;; Do FFT levels 1,2,3,4,5 (actually 4.32 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	640K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 twenty_reals_fft operations
;;	distance between fft data elements is 64K
;;	do 16 iterations each processing 80 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values
;; Do 144 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 36 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, (139-15)*4*blkdst		;; We've already prefetched 139 blocks which will be 15 too many

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos postmultipliers
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 10*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 64*4*clm			;; 16 or 40 iters of 4*clm

b1a:	start_timer 22
	yloop_set_clm_prefetch YNONE
	yr5_10cl_20_reals_fft_preload
b1b:	yr5_10cl_20_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD9 ;; 4 iters, next sin/cos ptr
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b1b, -2*clmblkdst8, rbp, -4*4*YMM_SCD9 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*4
	end_timer 22

	start_timer 24
	yloop_adjust 6*4			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4
	yloop	4, b4b, -4*64+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4
	yloop	4, b5b, -4*64+2*clmblkdst8, rdi, -4*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -10*2*clmblkdst8+4*64, rdi, 4*YMM_SCD4 ;; 10 iterations!!  Next source pointer, next sin/cos pointer
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbp, YMM_SCD9 ;; Test loop counter, next source pointer, next sin/cos pointer
	yloop	4, b1a, -4*clmblkdst, rdi, -4*clm*4*YMM_SCD4 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YNONE
	yr5_10cl_20_reals_fft_preload
b1b:	yr5_10cl_20_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD9 ;; 4*clm iters
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations, next source pointer
	yloop	2, b1b, -2*clmblkdst8		;; 2 iterations, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 10*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 40*4*clm			;; 40 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b4b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; Test loop counter, next source ptr
	yloop	4, b4b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD4 ;; Test loop counter, next source ptr, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_4cl_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b5b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdi, -4*4*clm*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	10, b5b, -10*2*clmblkdst8	;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 156 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 39 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 159 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 39.75 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCND4		;; Premultiplier/sin/cos ptr

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-10*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 40*4*clm			;; 40 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YHALF		;; Prefetch 78*clm cache lines
	loops_set_alternate_prefetch_increment 131, (78+80)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YHALF		;; Prefetch 80*clm cache lines
	loops_set_alternate_prefetch_increment 131, (78+80)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	10, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 40*4*clm			;; 40 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 78*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	20, b7b, -20*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-10*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 40*4*clm			;; 40 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 80*clm cache lines
pfing	bump	rcx, (131-78-80)*clm*64		;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	8, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	2, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	10, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1280 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 1280 doubles.
;; Memory examples are for a 1280K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 8*4*clm*YMM_SCD2 + 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8 = 122*clm 64-byte cache lines

yr4dwpn_pass1sc1280ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b5b, b7a, b7b, b9b, c0b, c1b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 1280, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1280K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 80 eight_complex_unfft8 operations
;;	distance between fft data elements is 1K
;;	do 20 macros each processing 64 data values

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 160 four_complex_unfft operations
;;	distance between fft data elements is 8K
;;	do 40 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+4*clm*YMM_SCD8+2*4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 40*4*clm			;; 20*4*clm or 40*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-2*4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rbx, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointer
	end_timer 17

	yloop	5, c9a, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9a, -20*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+2*4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 20*4*clm			;; 20*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr8_sg8cl_eight_complex_unfft8 rbp, 64, blkdst, 2*blkdst, 4*blkdst, rsi, 256, 64, 128, clmblkdst, rdi, YMM_SCD8, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*8*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	5, c9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sin/cos pointer
	yloop	4, c9b, -20*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 2*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-2*4*clm*8]		;; Sin/cos ptr
	yloop_init 40*4*clm			;; 40*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+clmblkdst	;; 4*clm iterations, next source ptr
	yloop	2, c7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Loop, next source ptr, restore sin/cos pointers
	yloop	20, c7b, -20*clmblkdst8, rdi, 2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K	...
;;	320K	...
;;	...

;; Do 128 five_complex_unfft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 40 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K	...
;;	320K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	640K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K	...

;; Do 160 four_complex_unfft operations
;;	distance between fft data elements is 160K
;;	do 40 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 64*4*clm			;; 32 or 40 iters of 4*clm
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr

c5a:	start_timer 18
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+5*clmblkdst8, rdi, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	8, c5b, -4*5*clmblkdst8, rdi, 4*clm*YMM_SCD2 ;; 4 iterations!! restore source pointer, next sin/cos ptr
	loops_undo 8*4*clm
	end_timer 18

	start_timer 20
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 5*clmblkdst8, 10*clmblkdst8, rbp, 0, 4*clm
	yloop	4*clm, c1b, -4*clm*64+clmblkdst8, rbp, 8*YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -5*clmblkdst8+clmblkdst, rbp, -5*8*YMM_SCD6+YMM_SCD6 ;; 5 iterations!! next source pointer, next sin/cos ptr
	end_timer 20

	yloop	8, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 32*4*clm			;; 32*4*clm iterations
	yloop_set_clm_prefetch YQUARTER
	yr5_5cl_five_complex_djbunfft_preload
c5b:	yr5_5cl_five_complex_djbunfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, c5b, -8*clmblkdst+5*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; 4 iterations, restore sin/cos pointer
	yloop	4, c5b, -4*5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 40*4*clm			;; 40 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 5*clmblkdst8, 10*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	5, c1b				;; Test loop counter
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 160
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 160

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	640K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	636K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K	...
;;	320K	...
;;	...

;; Do 160 four_complex_first_fft operations
;;	distance between fft data elements is 160K
;;	do 40 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	160K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	156K	...
;;	320K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...

;; Do 128 five_complex_fft operations
;;	distance between fft data elements is 32K
;;	do 32 macros each processing 40 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 88*4*blkdst		;; We've already prefetched 88 blocks

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, PREMULT_ADDR		;; Address of sin/cos table
	bump	rbp, 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 64*4*clm			;; 40 or 32 iters of 4*clm
b1a:	start_timer 22
	yloop_adjust 3*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 5*clmblkdst8, 10*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst8, rdi, 8*YMM_SCD6 ;; 4*clm iters
	yloop	8, b1b, -5*clmblkdst8, rdi, -5*8*YMM_SCD6+YMM_SCD6 ;; 5 iterations!! restore source ptr, next sin/cos ptr
	loops_undo 8*4*clm
	end_timer 22

	start_timer 24
	yloop_adjust 4*4*clm			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, clmblkdst8, rbp, YMM_SCD2, 4*clm
	yloop	4*clm, b5b, -4*clm*64+5*clmblkdst8, rbp, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos ptr
	yloop	8, b5b, -4*5*clmblkdst8+clmblkdst, rbp, 4*clm*YMM_SCD2 ;; 4 iterations!! next source pointer, next sin/cos ptr
	end_timer 24

	yloop	8, b1a, -8*clmblkdst		;; Test loop counter, restore source pointer
	lea	rdi, [rbp-8*4*clm*YMM_SCD2-2*4*clm*YMM_SCND2] ;; Next sin/cos ptr

ELSE

	start_timer 22
	yloop_init 40*4*clm			;; 40 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 5*clmblkdst8, 10*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	5, b1b, -5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 2*4*clm*16 + 2*4*clm*YMM_SCND2 + 4*clm*YMM_SCD8
	yloop_init 32*4*clm			;; 32 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr5_5cl_five_complex_djbfft_preload
b5b:	yr5_5cl_five_complex_djbfft rsi, 64, clmblkdst8, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	8, b5b, -8*clmblkdst+5*clmblkdst8, rdi, -8*4*clm*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b5b, -4*5*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 24
	bump	rdi, -2*4*clm*YMM_SCND2		;; Next sin/cos ptr

ENDIF

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	32K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	28K	...
;;	64K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...

;; Do 160 four_complex_fft operations
;;	distance between fft data elements is 8K
;;	do 40 macros each processing 32 data values

;; Do FFT levels 8,9,10
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	8K	+1K	+1K	+1K
;;	4K	...
;;	16K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	8K	+1	+1	+1
;;	1K	...
;;	...
;;	7K	...
;;	16K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 80 eight_complex_fft8 operations
;;	distance between fft data elements is 1K
;;	do 20 macros each processing 64 data values

IF (160*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-4*clm*YMM_SCD8]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 40*4*clm			;; 40 or 20 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 80*clm cache lines
	loops_set_alternate_prefetch_increment 122, (80+80)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 2*4*clm
	end_timer 25

	start_timer 26
	yloop_adjust 4*clm			;; Fewer iterations in this loop
	yloop_set_prefetch YSINGLE		;; Prefetch 80*clm cache lines
	loops_set_alternate_prefetch_increment 122, (80+80)
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rbx, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rbx, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	end_timer 26

	yloop	10, b7a, 0, rbx, clm*YMM_SCD8	;; 5 iterations!!!  Next premult/sine/cosine pointer
	yloop	4, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-2*4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 40*4*clm			;; 40 iters of 4*clm
	yloop_set_prefetch YHALF		;; Prefetch 80*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 2*clmblkdst, 4*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	2, b7b, -2*clmblkdst+clmblkdst8, rdx, -2*4*clm*8, rdi, -2*4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	20, b7b, -20*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -2*4*clm*16-4*clm*YMM_SCD8	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 20*4*clm			;; 20 iters of 4*clm
pfing	bump	rcx, (122-80-80)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YSINGLE		;; Prefetch 80*clm cache lines
b9b:	yr8_sg8cl_eight_complex_fft8 rsi, 256, 64, 128, clmblkdst, rbp, 64, blkdst, 2*blkdst, 4*blkdst, rdi, YMM_SCD8, clm
	yloop	clm, b9b, -clm*256+2*clmblkdst, rbp, -clm*64+8*blkdst, rdi, -clm*YMM_SCD8 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b, -4*2*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	5, b9b, 0, rdi, clm*YMM_SCD8	;; Test loop counter, next premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1280 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 1536 doubles.
;; Memory examples are for a 1536K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD2 + 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 = 123*clm 64-byte cache lines

yr4dwpn_pass1sc1536 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b2b, b3a, b3b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c2b, c3a, c3b, c4a, c4b, c5b, c6b, c7a, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 1536, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1536K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 191 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 47.75 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 188 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 47 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 48*4*clm			;; 48*4*clm iterations
	lea	rbx, [rdi+16*clm*YMM_SCD4+4*clm*16] ;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7a				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

c7a:	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	16, c9a, -48*4*clmblkdst	;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	12, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	16, c9b, -192*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c6b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; 4*clm iterations, restore sin/cos pointers
	yloop	48, c7b, -48*4*clmblkdst, rdi, 4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 16 six_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 24 data values
;; Do 240 three_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 60 macros each processing 24 data values

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...

;; Do 48 eight_reals_unfft operations
;;	distance between fft data elements is 48K
;;	do 12 macro processing 32 data values
;; Do 144 four_complex_unfft operations
;;	distance between fft data elements is 48K
;;	do 36 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	768K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	764K	...

;; Do 192 eight_reals_unfft operations
;;	distance between fft data elements is 192K
;;	do 48 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos data ptr
	lea	rbx, [rbp+48*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm or 48*4*clm iterations

c4a:	start_timer 18
	yloop_set_clm_prefetch YNONE
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c4b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -16*12*clmblkdst, rdi, 4*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	loops_undo 16*4
	end_timer 18

	start_timer 19
	yloop_adjust 4				;; Fewer than normal iterations
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c2b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, c2b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	4, c2b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD4 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer

	loops_reset
c3a:	yloop_adjust 4				;; Fewer than normal iterations
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, c3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	4, c3b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD4 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer
	yloop	4, c3a, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 19

	start_timer 20
	yloop_adjust 4*4			;; Fewer than normal iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD3 ;; Test loop counter, next sin/cos ptr
	yloop	16, c1b, -12*4*clmblkdst+4*64, rbp, -12*4*YMM_SCD3 ;; 12 iterations!!  Next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c4a, -clm*4*64+clmblkdst, rbx, YMM_SCD4, rbp, YMM_SCD3 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr3_3cl_csc_six_reals_unfft_preload
c4b:	yr3_3cl_csc_six_reals_unfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; 4 iterations, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; 4 iterations, restore sin/cos pointer
	yloop	16, c5b, -16*12*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 19
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	bump	rdi, 48*YMM_SCD3		;; Sin/cos ptr
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c2b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c2b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations, next sin/cos pointer
	yloop	12, c2b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c3b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations, next sine/cosine pointer
	yloop	12, c3b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD4 ;; Test loop counter, restore sine/cosine pointer
	yloop	4, c3b, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 19

	start_timer 20
	bump	rdi, -48*YMM_SCD3		;; Next fixed sine/cosine pointer
	yloop_init 48*4*clm			;; 48 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	48, c1b				;; 48 iterations
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 192
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 192

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	768K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	764K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...

;; Do 192 eight_reals_fft operations
;;	distance between fft data elements is 192K
;;	do 48 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 48 eight_reals_fft operations
;;	distance between fft data elements is 48K
;;	do 12 macros each processing 32 data values
;; Do 144 four_complex_fft operations
;;	distance between fft data elements is 48K
;;	do 36 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 six_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 24 data values
;; Do 240 three_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 60 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, (131-35)*4*blkdst		;; We've already prefetched 131 blocks which will be 35 too many

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos postmultipliers
	lea	rbx, [rbp+48*YMM_SCD3]		;; Sin/cos ptr
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 64*4*clm			;; 48 or 64 iters of 4*clm

b1a:	start_timer 22
	yloop_adjust 4*4			;; Fewer iterations this loop
	yloop_set_clm_prefetch YNONE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 48*clmblkdst, 96*clmblkdst, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD3 ;; Test loop counter, next sin/cos ptr
	yloop	16, b1b, -12*4*clmblkdst, rbp, -12*4*YMM_SCD3 ;; 12 iterations!!  Restore source pointer, restore sin/cos ptr
	loops_undo 16*4
	end_timer 22

	start_timer 23
	yloop_adjust 4				;; Fewer iterations this loop
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b2b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, b2b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	4, b2b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD4 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer

	loops_reset
b3a:	yloop_adjust 4				;; Fewer iterations this loop
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, b3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	4, b3b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD4 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer
	yloop	4, b3a, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 23

	start_timer 24
	yloop_set_clm_prefetch YNONE
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4
	yloop	4, b4b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4
	yloop	4, b5b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD2 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -16*12*clmblkdst+4*64, rdi, 4*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbx, YMM_SCD4, rbp, YMM_SCD3 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, b1a, -4*clmblkdst, rdi, -4*clm*4*YMM_SCD2 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	yloop_init 48*4*clm			;; 48 iters of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 48*clmblkdst, 96*clmblkdst, rdi, 0, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters
	yloop	48, b1b, -48*clmblkdst		;; 48 iterations, restore source pointer
	end_timer 22

	start_timer 23
	yloop_init 48*4*clm			;; 48 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b2b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b2b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	12, b2b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b3b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	12, b3b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	4, b3b, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 23

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr3_3cl_csc_six_reals_fft_preload
b4b:	yr3_3cl_csc_six_reals_fft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; Test loop counter, next source ptr
	yloop	4, b4b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, next source ptr, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YSINGLE
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	16, b5b, -16*12*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 188 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 47 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 191 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 47.75 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCND4		;; Premultiplier/sin/cos ptr

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-16*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 48*4*clm			;; 48 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_set_prefetch YHALF		;; Prefetch 94*clm cache lines
	loops_set_alternate_prefetch_increment 123, (94+48)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
	loops_set_alternate_prefetch_increment 123, (94+48)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	3, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 48*4*clm			;; 48 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b6b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 94*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	48, b7b, -48*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-16*clm*YMM_SCD4	;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 48*4*clm			;; 48 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointer, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
pfing	bump	rcx, (123-94-48)*clm*64	;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	12, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1536 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 1536 doubles.
;; Memory examples are for a 1536K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*YMM_SCD1 + 4*clm*16 + 4*clm*YMM_SCND2 + 16*clm*YMM_SCD4 = 93*clm 64-byte cache lines

yr4dwpn_pass1sc1536ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b3a, b3b, b5b, b7a, b7b, b9b, c0b, c1b, c3a, c3b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 1536, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1536K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 192 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 48 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 192 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 48 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+16*clm*YMM_SCD4+4*clm*16] ;; Load second premult/sin/cos pointer
	yloop_init 48*4*clm			;; 48*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	lea	rdx, [rbx-4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rbx, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointer
	end_timer 17

	yloop	3, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	16, c9a, -48*4*clmblkdst	;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCND2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	12, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	16, c9b, -192*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	bump	rdi, 4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*clm*8]		;; Sin/cos ptr
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	48, c7b, -48*4*clmblkdst, rdi, 4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 256 three_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 64 macros each processing 24 data values

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...

;; Do 192 four_complex_unfft operations
;;	distance between fft data elements is 48K
;;	do 48 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	768K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	764K	...

;; Do 192 four_complex_unfft operations
;;	distance between fft data elements is 192K
;;	do 48 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 64*4*clm			;; 64*4*clm or 48*4*clm iterations
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr
	lea	rbx, [rbp+48*YMM_SCD6]		;; Second sin/cos ptr

c5a:	start_timer 18
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD1 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -16*12*clmblkdst, rdi, 4*YMM_SCD1 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 16*4
	end_timer 18

	start_timer 19
c3a:	yloop_adjust 4				;; Fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, c3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD2 ;; Test loop counter, next sin/cos pointer
	yloop	4, c3b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD2 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer
	yloop	4, c3a, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 19

	start_timer 20
	yloop_adjust 4*4			;; Fewer iterations in this loop
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; 4 iterations, next sin/cos ptr
	yloop	16, c1b, -12*4*clmblkdst+4*64, rbp, -12*4*YMM_SCD6 ;; 12 iterations!!  Next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c5a, -clm*4*64+clmblkdst, rbx, YMM_SCD2, rbp, YMM_SCD6 ;; Test loop counter, next source pointer, next sin/cos ptrs
	yloop	4, c5a				;; Test loop counter

ELSE

	start_timer 18
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbunfft_preload
c5b:	yr3_3cl_three_complex_djbunfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD1 ;; 4*clm iterations, restore sin/cos pointer
	yloop	16, c5b, -16*12*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 19
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	bump	rdi, 48*YMM_SCD6		;; Sin/cos ptr
	yloop_init 48*4*clm			;; 48*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c3b, -4*clm*64+clmblkdst, rdi, YMM_SCD2 ;; 4*clm iterations, next sin/cos data
	yloop	12, c3b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD2 ;; 2 iterations, restore sin/cos pointer
	yloop	4, c3b, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 19

	start_timer 20
	bump	rdi, -48*YMM_SCD6		;; Sin/cos ptr
	yloop_init 48*4*clm			;; 48 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	48, c1b				;; 48 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 192
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 192

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	768K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	764K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...

;; Do 192 four_complex_first_fft operations
;;	distance between fft data elements is 192K
;;	do 48 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	192K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	188K	...
;;	384K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	44K	...
;;	96K	...
;;	...

;; Do 192 four_complex_fft operations
;;	distance between fft data elements is 48K
;;	do 48 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	48K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	48K	...
;;	96K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 256 three_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 64 macros each processing 24 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 144*4*blkdst		;; We've already prefetched 144 blocks

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr
	lea	rbx, [rbp+48*YMM_SCD6]		;; Second sin/cos ptr
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND2 + 16*clm*YMM_SCD4
	yloop_init 64*4*clm			;; 48 or 64 iters of 4*clm

b1a:	start_timer 22
	yloop_adjust 4*4			;; Fewer iterations this loop
	yloop_set_clm_prefetch YNONE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; Test loop counter, next sin/cos ptr
	yloop	16, b1b, -12*4*clmblkdst, rbp, -12*4*YMM_SCD6 ;; 12 iterations!!  Restore source pointer, restore sin/cos ptr
	loops_undo 16*4
	end_timer 22

	start_timer 23
b3a:	yloop_adjust 4				;; Fewer iterations this loop
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rbx, 0, 4
	yloop	4, b3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD2 ;; Test loop counter, next sin/cos pointer
	yloop	4, b3b, -3*4*clmblkdst+48*clmblkdst, rbx, -3*4*YMM_SCD2 ;; 3 iterations!!  Next source pointer, restore sin/cos pointer
	yloop	4, b3a, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 23

	start_timer 24
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4
	yloop	4, b5b, -4*64+12*clmblkdst, rdi, -4*YMM_SCD1 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -16*12*clmblkdst+4*64, rdi, 4*YMM_SCD1 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbx, YMM_SCD2, rbp, YMM_SCD6 ;; Test loop counter, next source pointer, next sin/cos ptrs
	yloop	4, b1a, -4*clmblkdst, rdi, -4*clm*4*YMM_SCD1 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 48*4*clm			;; 48 iters of 4*clm
	yloop_set_clm_prefetch YNONE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 48*clmblkdst, 96*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	48, b1b, -48*clmblkdst		;; 48 iterations
	end_timer 22

	start_timer 23
	yloop_init 48*4*clm			;; 48 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 12*clmblkdst, 24*clmblkdst, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b3b, -4*clm*64+clmblkdst, rdi, YMM_SCD2 ;; 4*clm iterations, next sin/cos pointer
	yloop	12, b3b, -12*clmblkdst+48*clmblkdst, rdi, -12*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b3b, -4*48*clmblkdst		;; Test loop counter, restore source pointer
	end_timer 23

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*clm*16 + 4*clm*YMM_SCND2 + 16*clm*YMM_SCD4
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_clm_prefetch YNONE
	yr3_3cl_three_complex_djbfft_preload
b5b:	yr3_3cl_three_complex_djbfft rsi, 64, 4*clmblkdst, rdi, YMM_SCD1, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst ;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+12*clmblkdst, rdi, -4*4*clm*YMM_SCD1 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	16, b5b, -16*12*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 192 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 48 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 192 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 48 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCND2		;; First sin/cos ptr

IF (192*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
	lea	rbx, [rdx-16*clm*YMM_SCD4]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 48*4*clm			;; 48 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
	loops_set_alternate_prefetch_increment 93, (48+48)
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptrs
	loops_undo 4*clm
	end_timer 25

	start_timer 26
	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
	loops_set_alternate_prefetch_increment 93, (48+48)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	3, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b7a				;; Test loop counter

ELSE

	start_timer 25
	lea	rdx, [rdi-4*clm*16]		;; Premultiplier/sin/cos ptr
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 48*4*clm			;; 48 iters of 4*clm
	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
b7b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdx, -4*clm*8, rdi, -4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	48, b7b, -48*4*clmblkdst	;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -4*clm*16-16*clm*YMM_SCD4	;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 48*4*clm			;; 48 iters of 4*clm
pfing	bump	rcx, (93-48-48)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YQUARTER		;; Prefetch 48*clm cache lines
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	12, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1536 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 1792 doubles.
;; Memory examples are for a 1792K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*16 + 4*4*clm*YMM_SCND4 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 14*clm*YMM_SCD4 = 174*clm 64-byte cache lines

yr4dwpn_pass1sc1792 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b2b, b3b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c2b, c3b, c4a, c4b, c5b, c6b, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 1792, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 1792K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 223 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 55.75 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 220 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 55 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (224*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 56*4*clm			;; 56*4*clm iterations
	lea	rbx, [rdi+14*clm*YMM_SCD4]	;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7b				;; Do complex macro
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_csc_eight_reals_unfft_preload
c6b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rbx, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rbx, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	14, c9a, -28*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCD4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 56*4*clm			;; 56*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	8, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	14, c9b, -28*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	yloop_init 56*4*clm			;; 56*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_csc_eight_reals_unfft_preload
c6b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	28, c7b, -28*clmblkdst8, rdi, 4*clm*YMM_SCD4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 16 eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 32 data values
;; Do 208 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 52 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	896K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	892K	...

;; Do 64 twenty_eight_reals_unfft operations
;;	distance between fft data elements is 64K
;;	do 16 macros each processing 112 data values

;; Process data in small chunks for more L1 data cache hits

IF (224*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	mov	rbp, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 64*4*clm			;; 56*4*clm or 16*4*clm iterations

c4a:	start_timer 18
	yloop_adjust 2*4			;; Do 56 rather than 64 iterations in this loop
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c4b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c4b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -14*2*clmblkdst8, rdx, 4*8, rdi, 4*YMM_SCND4 ;; 14 iterations!!  Restore source pointer, next sin/cos pointer
	loops_undo 16*4
	end_timer 18

	start_timer 20
	yloop_adjust 12*4			;; Do 16 rather than 64 iterations in this loop
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_unfft_preload
c1b:	yr7_14cl_28_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD13 ;; Test loop counter, next sin/cos ptr
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, c1b, -2*clmblkdst8+4*64, rbp, -4*4*YMM_SCD13 ;; 2 iterations!!  Next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c4a, -clm*4*64+clmblkdst, rbp, YMM_SCD13 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	yloop_init 56*4*clm			;; 56*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c4b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; 4 iterations, restore sin/cos pointer

	loops_reset
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	yloop_set_clm_prefetch YSINGLE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; 4 iterations, restore sin/cos pointer
	yloop	14, c5b, -14*2*clmblkdst8	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 20
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	yloop_init 16*4*clm			;; 16 iterations of 4*clm
	yloop_set_clm_prefetch YQUAD
	yr7_14cl_28_reals_unfft_preload
c1b:	yr7_14cl_28_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c1b				;; 2 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 224
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 224

;; Do FFT levels 1,2,3,4,5 (actually 4.81 levels)
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	896K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	892K
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 twenty_eight_reals_fft operations
;;	distance between fft data elements is 64K
;;	do 16 iterations each processing 112 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values
;; Do 208 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 52 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 172*4*blkdst		;; We've already prefetched 172 blocks

IF (224*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos postmultipliers
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 14*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 16 or 56 iters of 4*clm

b1a:	start_timer 22
	yloop_set_clm_prefetch YNONE
	yr7_14cl_28_reals_fft_preload
b1b:	yr7_14cl_28_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD13 ;; 4 iters, next sin/cos ptr
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b1b, -2*clmblkdst8, rbp, -4*4*YMM_SCD13 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*4
	end_timer 22

	start_timer 24
	yloop_adjust 2*4			;; Do fewer iterations in this loop
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b4b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4
	yloop	4, b4b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4
	yloop	4, b5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -14*2*clmblkdst8+4*64, rdx, 4*8, rdi, 4*YMM_SCND4 ;; 14 iterations!!  Next source pointer, next sin/cos pointer
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbp, YMM_SCD13 ;; Test loop counter, next source pointer, next sin/cos pointer
	yloop	4, b1a, -4*clmblkdst, rdi, -4*4*clm*16-4*clm*4*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	yloop_init 16*4*clm			;; 16 iters of 4*clm
	yloop_set_clm_prefetch YNONE
	yr7_14cl_28_reals_fft_preload
b1b:	yr7_14cl_28_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD13 ;; 4*clm iters
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations, next source pointer
	yloop	2, b1b, -2*clmblkdst8		;; 2 iterations, restore source pointer
	end_timer 22

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 14*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 56*4*clm			;; 56 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b4b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; Test loop counter, next source ptr
	yloop	4, b4b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b5b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	14, b5b, -14*2*clmblkdst8, rdi, -4*4*clm*16 ;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 220 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 55 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 223 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 55.75 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCD4		;; Premultiplier/sin/cos ptr

IF (224*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi-14*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 56*4*clm			;; 56 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_4cl_csc_eight_reals_fft_preload
b6b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, restore source ptr, restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 110*clm cache lines
	loops_set_alternate_prefetch_increment 174, (110+112)
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YHALF		;; Prefetch 112*clm cache lines
	loops_set_alternate_prefetch_increment 174, (110+112)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	14, b7a				;; Test loop counter

ELSE

	start_timer 25
	yloop_init 56*4*clm			;; 56 iterations of 4*clm
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_4cl_csc_eight_reals_fft_preload
b6b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, next source ptr, restore sin/cos ptr

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 110*clm cache lines
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	28, b7b, -28*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -14*clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 56*4*clm			;; 64 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 112*clm cache lines
pfing	bump	rcx, (174-110-112)*clm*64	;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	8, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	2, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	14, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 1792 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 FFT of length 2048 doubles.
;; Memory examples are for a 2048K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*16 + 4*4*clm*YMM_SCND4 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 = 182*clm 64-byte cache lines

yr4dwpn_pass1sc2048 MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b2b, b3b, b4b, b5b, b6b, b7a, b7b, b8b, b9a, b9b
	LOCAL	c0b, c1b, c2b, c3b, c4a, c4b, c5b, c6b, c7b, c7c, c8b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 0, 2048, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 2048K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values if pass 2 swizzles:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 1 eight_reals_unfft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 255 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 63.75 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 4 eight_reals_unfft operations
;;	distance between fft data elements is 4K
;;	do 1 macro processing 32 data values
;; Do 252 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 63 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdx, PREMULT_ADDR		;; Real data sin/cos pointer
	lea	rdi, [rdx+clm*YMM_SCD2]		;; Complex data sin/cos ptr
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	yloop_init 64*4*clm			;; 64*4*clm iterations
	lea	rbx, [rdi+16*clm*YMM_SCD4]	;; Sin/cos ptr

	start_timer 16
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	end_timer 16

	loops_reset
c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area pointer
	end_timer 16
	loops_undo 4*clm

	start_timer 17
	cmp	rsi, scratch_area		;; Do reals macro on first iteration, do complex on later iterations
	jne	c7b				;; Do complex macro
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c6b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rbx, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
	jmp	c7c
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rbx, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
c7c:	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	16, c9a, -32*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCD4]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
c8b:	yr4_sg4cl_2sc_eight_reals_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, rdx, YMM_SCD2, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next src/dest ptrs, restore sin/cos ptr
	yloop	8, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter, next dest pointer
	yloop	2, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next sin/cos pointer
	yloop	16, c9b, -32*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c6b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c6b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; 4*clm iterations, restore sin/cos pointer
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	32, c7b, -32*clmblkdst8, rdi, 4*clm*YMM_SCD4 ;; Test loop counter, restore source pointer, next sin/cos ptr
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 16 eight_reals_unfft operations
;;	distance between fft data elements is 16K
;;	do 4 macro processing 32 data values
;; Do 240 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 60 macros each processing 32 data values

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...

;; Do 64 eight_reals_unfft operations
;;	distance between fft data elements is 64K
;;	do 16 macro processing 32 data values
;; Do 192 four_complex_unfft operations
;;	distance between fft data elements is 64K
;;	do 48 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	1024K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	1020K	...

;; Do 256 eight_reals_unfft operations
;;	distance between fft data elements is 256K
;;	do 64 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	mov	rbp, sincos2			;; Load fixed sin/cos data ptr
	lea	rbx, [rbp+64*YMM_SCD3]		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations

c4a:	start_timer 18
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c4b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c4b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YNONE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -16*2*clmblkdst8, rdx, 4*8, rdi, 4*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos pointer
	loops_undo 16*4
	end_timer 18

	start_timer 19
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c2b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, c2b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	2, c2b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, c2b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, c3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	2, c3b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, c3b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos pointer
	yloop	4, c3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 19

	start_timer 20
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD3 ;; Test loop counter, next sin/cos ptr
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, c1b, -8*clmblkdst8+4*64, rbp, -16*4*YMM_SCD3 ;; Test loop counter, next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c4a, -clm*4*64+clmblkdst, rbx, YMM_SCD4, rbp, YMM_SCD3 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, c4a				;; Test loop counter

ELSE

	start_timer 18
	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_unfft_preload
c4b:	yr4_b4cl_csc_wpn_eight_reals_unfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c4b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c4b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; 4 iterations, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YNONE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; 4 iterations, restore sin/cos pointer
	yloop	16, c5b, -16*2*clmblkdst8	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 19
	mov	rdi, sincos2			;; Load fixed sin/cos data ptr
	bump	rdi, 64*YMM_SCD3		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_unfft_preload
c2b:	yr4_4cl_csc_eight_reals_unfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c2b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations, next sin/cos pointer
	yloop	8, c2b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c2b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD4 ;; Test loop counter, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c3b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations, next sine/cosine pointer
	yloop	8, c3b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c3b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD4 ;; 2 iterations, restore sine/cosine pointer
	yloop	4, c3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 19

	start_timer 20
	bump	rdi, -64*YMM_SCD3		;; Next fixed sine/cosine pointer
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_clm_prefetch YSINGLE
	yr4_4cl_eight_reals_unfft_preload
c1b:	yr4_4cl_eight_reals_unfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	8, c1b				;; 8 iterations
	end_timer 20
ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 256
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 256

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	1024K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	1020K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...

;; Do 256 eight_reals_fft operations
;;	distance between fft data elements is 256K
;;	do 64 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 64 eight_reals_fft operations
;;	distance between fft data elements is 64K
;;	do 16 macros each processing 32 data values
;; Do 192 four_complex_fft operations
;;	distance between fft data elements is 64K
;;	do 48 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 16 eight_reals_fft operations
;;	distance between fft data elements is 16K
;;	do 4 macros each processing 32 data values
;; Do 240 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 60 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, (175-27)*4*blkdst		;; We've already prefetched 175 blocks which will be 27 too many

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed sin/cos postmultipliers
	lea	rbx, [rbp+64*YMM_SCD3]		;; Sin/cos ptr
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 64 iters of 4*clm

b1a:	start_timer 22
	yloop_set_clm_prefetch YNONE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD3 ;; Test loop counter, next sin/cos ptr
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, b1b, -8*clmblkdst8, rbp, -16*4*YMM_SCD3 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 16*4
	end_timer 22

	start_timer 23
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b2b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, b2b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	2, b2b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b2b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos pointer

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, b3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD4 ;; Test loop counter, next sin/cos pointer
	yloop	2, b3b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b3b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos pointer
	yloop	4, b3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 23

	start_timer 24
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b4b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4
	yloop	4, b4b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointers

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4
	yloop	4, b5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND4 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -16*2*clmblkdst8+4*64, rdx, 4*8, rdi, 4*YMM_SCND4 ;; Test loop counter, restore source pointer, next sin/cos pointers
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbx, YMM_SCD4, rbp, YMM_SCD3 ;; Test loop counter, next source pointer, next sin/cos pointers
	yloop	4, b1a, -4*clmblkdst, rdi, -4*4*clm*16-4*clm*4*YMM_SCND4 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed sin/cos postmultipliers
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_4cl_eight_reals_fft_preload
b1b:	yr4_4cl_eight_reals_fft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD3 ;; 4*clm iters
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	8, b1b, -8*clmblkdst8		;; 8 iterations, restore source pointer
	end_timer 22

	start_timer 23
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_4cl_csc_eight_reals_fft_preload
b2b:	yr4_4cl_csc_eight_reals_fft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b2b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, b2b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, b2b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD4 ;; Test loop counter, restore sin/cos ptr

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b3b, -4*clm*64+clmblkdst, rdi, YMM_SCD4 ;; 4*clm iterations
	yloop	8, b3b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, b3b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	4, b3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 23

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of premultiplier/sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD4 + clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
	yr4_b4cl_csc_wpn_eight_reals_fft_preload
b4b:	yr4_b4cl_csc_wpn_eight_reals_fft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b4b, -4*clm*64+clmblkdst ;; Test loop counter, next source ptr
	yloop	4, b4b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; Test loop counter, next source ptr, restore sin/cos ptrs

	loops_reset
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND4, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	16, b5b, -16*2*clmblkdst8, rdi, -4*4*clm*16 ;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 4 eight_reals_fft operations
;;	distance between fft data elements is 4K
;;	do 1 macros each processing 32 data values
;; Do 252 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 63 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 1 eight_reals_fft operations
;;	distance between fft data elements is 1K
;;	do 0.25 macros each processing 32 data values
;; Do 255 four_complex_fft4 operations
;;	distance between fft data elements is 1K
;;	do 63.75 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCD4		;; Premultiplier/sin/cos ptr

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi-16*clm*YMM_SCD4]	;; Complex data sin/cos ptr
	lea	rdx, [rbx-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 64*4*clm			;; 64 iterations of 4*clm

	start_timer 25
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_4cl_csc_eight_reals_fft_preload
b6b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b6b, -4*clm*64, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, restore source ptr. restore sin/cos ptr
	end_timer 25
	loops_undo 4*clm

	start_timer 26
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	jmp	b9a				;; Do remaining complex macro calls
	loops_reset				;; Dummy loops_reset so that next section prefetches properly

b7a:	start_timer 25
	yloop_set_prefetch YHALF		;; Prefetch 126*clm cache lines
	loops_set_alternate_prefetch_increment 182, (126+64)
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
b9a:	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
	loops_set_alternate_prefetch_increment 182, (126+64)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b7a				;; Test loop counter

ELSE

pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	start_timer 25
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_4cl_csc_eight_reals_fft_preload
b6b:	yr4_4cl_csc_eight_reals_fft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b6b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, next source ptr, restore sin/cos ptr

	loops_reset
	yloop_set_prefetch YHALF		;; Prefetch 126*clm cache lines
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD4, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD4 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	32, b7b, -32*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -16*clm*YMM_SCD4		;; Complex data sin/cos ptr
	lea	rdx, [rdi-clm*YMM_SCD2]		;; Real data sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_prefetch YNONE		;; Prefetch no cache lines
	yr4_sg4cl_2sc_eight_reals_fft4_preload
b8b:	yr4_sg4cl_2sc_eight_reals_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, rdx, YMM_SCD2, clm
	yloop	clm, b8b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer

	loops_reset
	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
pfing	bump	rcx, (182-126-64)*clm*64	;; Finish prefetch the sin/cos/premult data
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	8, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	2, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 2048 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM


;; Perform a pass 1 all-complex FFT of length 2048 doubles.
;; Memory examples are for a 2048K FFT with 10 levels done in pass 2.
;; Sin/cos data needed: 4*4*clm*16 + 4*4*clm*YMM_SCND2 + 4*clm*YMM_SCD2 + 16*clm*YMM_SCD4 = 124*clm 64-byte cache lines

yr4dwpn_pass1sc2048ac MACRO fftname, pass2_levels, clmarg
	LOCAL	b0b, b1a, b1b, b3b, b5b, b7a, b7b, b9b, c0b, c1b, c3b, c5a, c5b, c7b, c9a, c9b
	LOCAL	pass1, pass2, endlp, done, done, yes_fft

	set_FFT_constants fftname, 0, 1, 2048, pass2_levels, clmarg
	yfft_header pass1

;; Do pass 2 (the last 10 FFT levels if this is a 2048K FFT)

pass2:	start_timer 0
	call	ypass2name
	end_timer 0
	cmp	ffttype, 1		;; We're done if FFTing only
	je	done

;; Do the inverse FFT

	pass1_inverse_fft_setup c0b

;; Do inverse FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; The output cache lines are swizzled to hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 256 four_complex_unfft4 operations
;;	distance between fft data elements is 1K
;;	do 64 macros each processing 32 data values

;; Do inverse FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 256 four_complex_unfft operations
;;	distance between fft data elements is 4K
;;	do 64 macros each processing 32 data values

c0b:	mov	rbp, DATA_ADDR			;; Get source address
	mov	rsi, scratch_area		;; Get address of scratch area
	mov	rdi, PREMULT_ADDR		;; Load premult/sin/cos pointer
	set_data_prefetch_ptrs			;; Init prefetching pointers

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi+16*clm*YMM_SCD4]	;; Load second premult/sin/cos pointer
	yloop_init 64*4*clm			;; 64*4*clm iterations

c9a:	start_timer 16
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	4, c9b, -4*clmblkdst		;; Test loop counter, restore scratch area ptr
	loops_undo 4*clm
	end_timer 16

	start_timer 17
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rbx, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rbx, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos pointer
	end_timer 17

	yloop	2, c9a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9a, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	16, c9a, -32*clmblkdst8		;; Test loop counter, restore source pointer
	lea	rdi, [rbx+4*clm*YMM_SCD2]	;; Next sin/cos ptr

ELSE

	start_timer 16
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
c9b:	yr4_sg4cl_four_complex_unfft4 rbp, 64, blkdst, 2*blkdst, rsi, 256, 64, 128, rdi, YMM_SCD4, clm, L1PREFETCH_ALL, ((clm MOD 2)+1)*4*blkdst ;; Prefetch short dist ahead
	yloop	clm, c9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next dest/src ptrs, restore premult/sin/cos ptr
	yloop	8, c9b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, c9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sin/cos pointer
	yloop	16, c9b, -32*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 16

	start_timer 17
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c7b:	yr4_4cl_four_complex_djbunfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD2 ;; 4*clm iterations, restore sin/cos pointer
	yloop	2, c7b, -2*4*clmblkdst+clmblkdst8 ;; 2 iterations, next source pointer
	yloop	32, c7b, -32*clmblkdst8, rdi, 4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, next sin/cos pointer
	end_timer 17

ENDIF

;; Do inverse FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 256 four_complex_unfft operations
;;	distance between fft data elements is 16K
;;	do 64 macros each processing 32 data values

;; Do inverse FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...

;; Do 256 four_complex_unfft operations
;;	distance between fft data elements is 64K
;;	do 64 macros each processing 32 data values

;; Do inverse FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	1024K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	1020K	...

;; Do 256 four_complex_unfft operations
;;	distance between fft data elements is 256K
;;	do 64 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr
	lea	rbx, [rbp+64*YMM_SCD6]		;; Second sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations

c5a:	start_timer 18
	yloop_set_clm_prefetch YNONE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND2, 4, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4, c5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND2 ;; Test loop counter, restore sin/cos pointer
	yloop	16, c5b, -16*2*clmblkdst8, rdx, 4*8, rdi, 4*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos ptr
	loops_undo 16*4
	end_timer 18

	start_timer 19
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, c3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD2 ;; Test loop counter, next sin/cos pointer
	yloop	2, c3b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, c3b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD2 ;; Test loop counter, next source pointer, restore sin/cos pointer
	yloop	4, c3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 19

	start_timer 20
	yloop_set_clm_prefetch YNONE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rbp, 0, 4
	yloop	4, c1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; 4 iterations, next sin/cos ptr
	yloop	2, c1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, c1b, -8*clmblkdst8+4*64, rbp, -16*4*YMM_SCD6 ;; Test loop counter, next source pointer, restore sin/cos ptr
	end_timer 20

	yloop	clm, c5a, -clm*4*64+clmblkdst, rbx, YMM_SCD2, rbp, YMM_SCD6 ;; Test loop counter, next source pointer, next sin/cos ptrs
	yloop	4, c5a				;; Test loop counter

ELSE

	start_timer 18
	bump	rdi, 4*4*clm*16			;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*8]		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YNONE
c5b:	yr4_b4cl_wpn_four_complex_djbunfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c5b, -4*clm*64+clmblkdst ;; 4*clm iterations
	yloop	4, c5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND2 ;; 4*clm iterations, restore sin/cos pointers
	yloop	16, c5b, -16*2*clmblkdst8	;; Test loop counter, restore source pointer
	end_timer 18

	start_timer 19
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	bump	rdi, 64*YMM_SCD6		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64*4*clm iterations
	yloop_set_clm_prefetch YSINGLE
c3b:	yr4_4cl_four_complex_djbunfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c3b, -4*clm*64+clmblkdst, rdi, YMM_SCD2 ;; 4*clm iterations, next sin/cos data
	yloop	8, c3b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	2, c3b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD2 ;; 2 iterations, restore sin/cos pointer
	yloop	4, c3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 19

	start_timer 20
	bump	rdi, -64*YMM_SCD6		;; Sin/cos ptr
	yloop_init 64*4*clm			;; 64 iterations of 4*clm
	yloop_set_clm_prefetch YNONE
c1b:	yr4_4cl_csc_four_complex_last_djbunfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, c1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iterations
	yloop	8, c1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	8, c1b				;; 8 iterations
	end_timer 20

ENDIF

;; Normalize these values

	pass1_normalize 1, yes_fft

;; Copy data from the scratch area back to the FFT data area

	copy_scratch_data_to_fft 256
	jmp	endlp			;; Skip FFT code if flag not set

;; Fire up auxiliary threads to do pass 1 forward FFT

pass1:	pass1_forward_fft_setup b0b

;; Copy data from the FFT data area back to the scratch area

b0b:	copy_fft_data_to_scratch 256

;; Do FFT levels 1,2,3
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	1024K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	1020K	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...

;; Do 256 four_complex_first_fft operations
;;	distance between fft data elements is 256K
;;	do 64 iterations each processing 32 data values

;; Do FFT levels 4,5
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	256K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	252K	...
;;	512K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...

;; Do 256 four_complex_fft operations
;;	distance between fft data elements is 64K
;;	do 64 macros each processing 32 data values

;; Do FFT levels 6,7
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	64K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	60K	...
;;	128K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...

;; Do 256 four_complex_fft operations
;;	distance between fft data elements is 16K
;;	do 64 macros each processing 32 data values

;; Process data in small chunks for more L1 data cache hits

yes_fft:mov	rsi, scratch_area		;; Get address of scratch area
	set_data_prefetch_ptrs			;; Init prefetching pointers
pfing	bump	rcx, 128*4*blkdst		;; We've already prefetched 128 blocks

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	mov	rbp, sincos2			;; Load fixed premultiplier/sin/cos ptr
	lea	rbx, [rbp+64*YMM_SCD6]		;; Second sin/cos ptr
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Third sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 64 iters of 4*clm

b1a:	start_timer 22
	yloop_set_clm_prefetch YNONE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rbp, 0, 4, L1PREFETCH_ALL, 2*64
	yloop	4, b1b, -4*64+4*clmblkdst, rbp, 4*YMM_SCD6 ;; Test loop counter, next sin/cos ptr
	yloop	2, b1b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	8, b1b, -8*clmblkdst8, rbp, -16*4*YMM_SCD6 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 16*4
	end_timer 22

	start_timer 23
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rbx, 0, 4
	yloop	4, b3b, -4*64+4*clmblkdst, rbx, 4*YMM_SCD2 ;; Test loop counter, next sin/cos pointer
	yloop	2, b3b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b3b, -2*clmblkdst8+8*clmblkdst8, rbx, -4*4*YMM_SCD2 ;; Test loop counter, next source pointer, restore sin/cos pointer
	yloop	4, b3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	loops_undo 4*4*4
	end_timer 23

	start_timer 24
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND2, 4
	yloop	4, b5b, -4*64+2*clmblkdst8, rdx, -4*8, rdi, -4*YMM_SCND2 ;; Test loop counter, restore sin/cos pointer
	yloop	16, b5b, -16*2*clmblkdst8+4*64, rdx, 4*8, rdi, 4*YMM_SCND2 ;; Test loop counter, restore source pointer, next sin/cos ptrs
	end_timer 24

	yloop	clm, b1a, -clm*4*64+clmblkdst, rbx, YMM_SCD2, rbp, YMM_SCD6 ;; Test loop counter, next source pointer, next sin/cos ptrs
	yloop	4, b1a, -4*clmblkdst, rdi, -4*4*clm*16-4*clm*4*YMM_SCND2 ;; Test loop counter, restore source pointer, restore sin/cos ptr

ELSE

	start_timer 22
	mov	rdi, sincos2			;; Load fixed premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_clm_prefetch YNONE
b1b:	yr4_4cl_csc_four_complex_first_djbfft rsi, 64, 8*clmblkdst8, 16*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b1b, -4*clm*64+clmblkdst, rdi, YMM_SCD6 ;; 4*clm iters prefetching 4*clm cache lines
	yloop	8, b1b, -8*clmblkdst+clmblkdst8 ;; 8 iterations
	yloop	8, b1b, -8*clmblkdst8		;; 8 iterations
	end_timer 22

	start_timer 23
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b3b:	yr4_4cl_four_complex_djbfft rsi, 64, 2*clmblkdst8, 4*clmblkdst8, rdi, 0, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b3b, -4*clm*64+clmblkdst, rdi, YMM_SCD2 ;; 4*clm iterations, next sin/cos pointer
	yloop	8, b3b, -8*clmblkdst+clmblkdst8 ;; Test loop counter
	yloop	2, b3b, -2*clmblkdst8+8*clmblkdst8, rdi, -16*YMM_SCD2 ;; Test loop counter, restore sin/cos ptr
	yloop	4, b3b, -4*8*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 23

	start_timer 24
	mov	rdi, PREMULT_ADDR		;; Address of sin/cos table
	bump	rdi, 4*4*clm*16 + 4*clm*YMM_SCD2 + 16*clm*YMM_SCD4 ;; Sin/cos ptr
	lea	rdx, [rdi-4*4*clm*16]		;; Premultiplier/sin/cos ptr
	yloop_init 64*4*clm			;; 64 iters of 4*clm
	yloop_set_clm_prefetch YSINGLE
b5b:	yr4_b4cl_wpn_four_complex_djbfft rsi, 64, 4*clmblkdst, clmblkdst8, rdx, 8, rdi, YMM_SCND2, 4*clm, L1PREFETCH_ALL, 2*64 ;; Prefetch short dist ahead
	yloop	4*clm, b5b, -4*clm*64+clmblkdst	;; Test loop counter, next source pointer
	yloop	4, b5b, -4*clmblkdst+2*clmblkdst8, rdx, -4*4*clm*8, rdi, -4*4*clm*YMM_SCND2 ;; Test loop counter, next source pointer, restore sin/cos ptrs
	yloop	16, b5b, -16*2*clmblkdst8, rdi, -4*4*clm*16 ;; Test loop counter, restore source pointer
	end_timer 24

ENDIF

;; Do FFT levels 8,9
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	16K	+1K	+1K	+1K
;;	4K	...
;;	...
;;	12K	...
;;	32K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...

;; Do 256 four_complex_fft operations
;;	distance between fft data elements is 4K
;;	do 64 macros each processing 32 data values

;; Do FFT levels 10,11
;; On input the 64-byte cache lines hold these data values:
;;	0K	+1K	+1K	+1K	4K	+1K	+1K	+1K
;;	8K	...
;;	...
;; The input is swizzled to hold these data values:
;;	0K	+1	+1	+1	4K	+1	+1	+1
;;	1K	...
;;	...
;;	3K	...
;;	8K	...
;;	...
;; On output the 64-byte cache lines hold these data values:
;;	0K	+1	+1	+1	1K	+1	+1	+1
;;	2K	...
;;	...

;; Do 256 four_complex_fft operations
;;	distance between fft data elements is 1K
;;	do 64 macros each processing 32 data values

	bump	rdi, -4*clm*YMM_SCD2		;; First sin/cos ptr

IF (256*4*clm*64 GT GROUPING_SIZE) OR (clm GE CLM_GROUPING)

	lea	rbx, [rdi-16*clm*YMM_SCD4]	;; Second premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_init 64*4*clm			;; 64 iters of 4*clm

b7a:	start_timer 25
	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
	loops_set_alternate_prefetch_increment 124, (64+64)
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 4*clmblkdst
	yloop	4*clm, b7b, -4*clm*64, rdi, -4*clm*YMM_SCD2 ;; Test loop counter, restore source pointer, restore sin/cos ptr
	loops_undo 4*clm
	end_timer 25

	start_timer 26
	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
	loops_set_alternate_prefetch_increment 124, (64+64)
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rbx, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rbx, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	4, b9b				;; Test loop counter
	end_timer 26

	yloop	2, b7a, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	2, b7a, 0, rbx, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b7a				;; Test loop counter

ELSE

	start_timer 25
	yloop_init 64*4*clm			;; 64 iters of 4*clm
pfing	mov	rcx, PREMULT_PREFETCH		;; Load premult/sin/cos prefetch pointer
	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
b7b:	yr4_4cl_four_complex_djbfft rsi, 64, clmblkdst, 2*clmblkdst, rdi, YMM_SCD2, 4*clm, L1PREFETCH_ALL, 2*64
	yloop	4*clm, b7b, -4*clm*64+4*clmblkdst, rdi, -4*clm*YMM_SCD2 ;; Test loop counter, next source pointer, restore sin/cos ptr
	yloop	2, b7b, -2*4*clmblkdst+clmblkdst8 ;; Test loop counter, next source pointer
	yloop	32, b7b, -32*clmblkdst8		;; Test loop counter, restore source pointer
	end_timer 25

	start_timer 26
	bump	rdi, -16*clm*YMM_SCD4		;; Next premult/sin/cos ptr
	mov	rbp, DATA_ADDR			;; Destination pointer
	yloop_init 64*4*clm			;; 64 iters of 4*clm
pfing	bump	rcx, (124-64-64)*clm*64		;; Finish prefetching the sin/cos/premult data
	yloop_set_prefetch YQUARTER		;; Prefetch 64*clm cache lines
b9b:	yr4_sg4cl_four_complex_fft4 rsi, 256, 64, 128, rbp, 64, blkdst, 2*blkdst, rdi, YMM_SCD4, clm
	yloop	clm, b9b, -clm*256+clmblkdst, rbp, -clm*64+4*blkdst, rdi, -clm*YMM_SCD4 ;; Loop, next source/dest pointers, restore premult/sine/cosine pointer
	yloop	8, b9b, -8*clmblkdst+clmblkdst8	;; Test loop counter, next source pointer
	yloop	2, b9b, 0, rdi, clm*YMM_SCD4	;; Test loop counter, next premult/sine/cosine pointer
	yloop	16, b9b				;; Test loop counter
	end_timer 26

ENDIF

;; Work on next 4*clm sets of 2048 values

endlp:	ypass1_get_next_block pass2, c0b, b0b ;; Get next block and jump
done:	yfft_footer
	ENDM

