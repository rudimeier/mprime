; Copyright 1995-2010 Mersenne Research, Inc.  All rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; Common EXTRN definitions for the three multiplication assembly
; language files. Well, the EXTRN's to global variables have been replaced
; a C structure so we can support multi-threading.

; Shortcuts for typecasting.  Be aware that pointers are different sizes
; in 32-bit and 64-bit mode.

DPTR	EQU	<DWORD PTR>
QPTR	EQU	<QWORD PTR>
XPTR	EQU	<QWORD PTR>
IFNDEF	X86_64
PPTR	EQU	<DWORD PTR>
ELSE
PPTR	EQU	<QWORD PTR>
ENDIF

; In 32-bit mode we are so starved for registers that we are forced to
; use the stack pointer to access the asm_data.  In 64-bit mode we
; use one of the extra 8 registers.  We can't use the rsp trick because
; that violates the Window's exception handling stack unwind mechanism.

IFNDEF X86_64
AD_BASE		EQU	<rsp+push_amt>
ELSE
AD_BASE		EQU	<r11>
ENDIF

; This structure defines the C / ASM code data interface.  A pointer to
; this structure is passed to nearly every asm routine.

; Pointer to the entire structure
ASM_DATA		EQU	PPTR [AD_BASE+0*SZPTR]

; Values used in pass 1
DESTARG			EQU	PPTR [AD_BASE+0*SZPTR]
DIST_TO_FFTSRCARG	EQU	PPTR [AD_BASE+1*SZPTR]
DIST_TO_MULSRCARG	EQU	PPTR [AD_BASE+2*SZPTR]
NORMRTN			EQU	PPTR [AD_BASE+3*SZPTR]

ZERO_PADDED_FFT		EQU	DPTR [AD_BASE+4*SZPTR]
POSTFFT			EQU	DPTR [AD_BASE+4*SZPTR+1*4]
MAXERR			EQU	QPTR [AD_BASE+4*SZPTR+2*4]

scratch_area		EQU	PPTR [AD_BASE+4*SZPTR+4*4]
norm_grp_mults		EQU	PPTR [AD_BASE+5*SZPTR+4*4]
norm_col_mults		EQU	PPTR [AD_BASE+6*SZPTR+4*4]
norm_biglit_array	EQU	PPTR [AD_BASE+7*SZPTR+4*4]

carries			EQU	PPTR [AD_BASE+8*SZPTR+4*4]
plus1_premults		EQU	PPTR [AD_BASE+9*SZPTR+4*4]
pass2gapsize		EQU	PPTR [AD_BASE+10*SZPTR+4*4]
sincos1			EQU	PPTR [AD_BASE+11*SZPTR+4*4]

sincos2			EQU	PPTR [AD_BASE+12*SZPTR+4*4]
sincos3			EQU	PPTR [AD_BASE+13*SZPTR+4*4]
sincos4			EQU	PPTR [AD_BASE+14*SZPTR+4*4]
sincos5			EQU	PPTR [AD_BASE+15*SZPTR+4*4]

; Values used in pass2
pass1blkdst		EQU	PPTR [AD_BASE+16*SZPTR+4*4]
pass2_premults		EQU	PPTR [AD_BASE+17*SZPTR+4*4]
xsincos_complex		EQU	PPTR [AD_BASE+18*SZPTR+4*4]
sincos6			EQU	PPTR [AD_BASE+19*SZPTR+4*4]

sincos7			EQU	PPTR [AD_BASE+20*SZPTR+4*4]
sincos8			EQU	PPTR [AD_BASE+21*SZPTR+4*4]
sincos9			EQU	PPTR [AD_BASE+22*SZPTR+4*4]
sincos10		EQU	PPTR [AD_BASE+23*SZPTR+4*4]

XMM_TWO			EQU	XPTR [AD_BASE+24*SZPTR+4*4]
XMM_HALF		EQU	XPTR [AD_BASE+24*SZPTR+8*4]
XMM_SQRTHALF		EQU	XPTR [AD_BASE+24*SZPTR+12*4]
XMM_TMP1		EQU	XPTR [AD_BASE+24*SZPTR+16*4]
XMM_TMP2		EQU	XPTR [AD_BASE+24*SZPTR+20*4]
XMM_TMP3		EQU	XPTR [AD_BASE+24*SZPTR+24*4]
XMM_TMP4		EQU	XPTR [AD_BASE+24*SZPTR+28*4]
XMM_TMP5		EQU	XPTR [AD_BASE+24*SZPTR+32*4]
XMM_TMP6		EQU	XPTR [AD_BASE+24*SZPTR+36*4]
XMM_TMP7		EQU	XPTR [AD_BASE+24*SZPTR+40*4]
XMM_TMP8		EQU	XPTR [AD_BASE+24*SZPTR+44*4]

ffttype			EQU	DPTR [AD_BASE+24*SZPTR+48*4]
count1			EQU	DPTR [AD_BASE+24*SZPTR+49*4]

; Values used in normalization (+ 2 consts used in add/sub (normval1 & 4))
ADDIN_ROW		EQU	DPTR [AD_BASE+24*SZPTR+50*4]
ADDIN_OFFSET		EQU	DPTR [AD_BASE+24*SZPTR+51*4]

addcount1		EQU	DPTR [AD_BASE+24*SZPTR+52*4]
normval1		EQU	DPTR [AD_BASE+24*SZPTR+53*4]
normval4		EQU	DPTR [AD_BASE+24*SZPTR+54*4]
ALL_COMPLEX_FFT		EQU	DPTR [AD_BASE+24*SZPTR+55*4]

cache_line_multiplier	EQU	DPTR [AD_BASE+24*SZPTR+56*4]
RATIONAL_FFT		EQU	DPTR [AD_BASE+24*SZPTR+57*4]
TOP_CARRY_NEEDS_ADJUSTING EQU	DPTR [AD_BASE+24*SZPTR+58*4]
SPREAD_CARRY_OVER_4_WORDS EQU	DPTR [AD_BASE+24*SZPTR+59*4]

zero_fft		EQU	DPTR [AD_BASE+24*SZPTR+60*4]
const_fft		EQU	DPTR [AD_BASE+24*SZPTR+61*4]
ADDIN_VALUE		EQU	QPTR [AD_BASE+24*SZPTR+62*4]

norm_ptr1		EQU	PPTR [AD_BASE+24*SZPTR+64*4]
norm_ptr2		EQU	PPTR [AD_BASE+25*SZPTR+64*4]
normblkdst		EQU	PPTR [AD_BASE+26*SZPTR+64*4]
normblkdst8		EQU	PPTR [AD_BASE+27*SZPTR+64*4]

XMM_SUMOUT		EQU	XPTR [AD_BASE+28*SZPTR+64*4]
XMM_MAXERR		EQU	XPTR [AD_BASE+28*SZPTR+68*4]
XMM_LIMIT_BIGMAX	EQU	XPTR [AD_BASE+28*SZPTR+72*4]
XMM_LIMIT_INVERSE	EQU	XPTR [AD_BASE+28*SZPTR+264*4]
XMM_COL_MULTS		EQU	XPTR [AD_BASE+28*SZPTR+456*4]
XMM_TTP_FUDGE		EQU	XPTR [AD_BASE+28*SZPTR+2504*4]
XMM_TTMP_FUDGE		EQU	XPTR [AD_BASE+28*SZPTR+2568*4]
XMM_BIGVAL		EQU	XPTR [AD_BASE+28*SZPTR+2632*4]
XMM_MINUS_C		EQU	XPTR [AD_BASE+28*SZPTR+2636*4]
XMM_NORM012_FF		EQU	XPTR [AD_BASE+28*SZPTR+2640*4]
XMM_LIMIT_BIGMAX_NEG	EQU	XPTR [AD_BASE+28*SZPTR+2644*4]

; Values used in round off checking
XMM_ABSVAL		EQU	XPTR [AD_BASE+28*SZPTR+2836*4]

; Values used in 20-reals
XMM_P309		EQU	XPTR [AD_BASE+28*SZPTR+2840*4]
XMM_P809		EQU	XPTR [AD_BASE+28*SZPTR+2844*4]
XMM_P951		EQU	XPTR [AD_BASE+28*SZPTR+2848*4]
XMM_P588		EQU	XPTR [AD_BASE+28*SZPTR+2852*4]

; Values used in PFA-5 (old v25 home-grown FFTs)
XMM_P618		EQU	XPTR [AD_BASE+28*SZPTR+2856*4]
XMM_M809		EQU	XPTR [AD_BASE+28*SZPTR+2860*4]
XMM_M262		EQU	XPTR [AD_BASE+28*SZPTR+2864*4]
XMM_M382		EQU	XPTR [AD_BASE+28*SZPTR+2868*4]
XMM_M162		EQU	XPTR [AD_BASE+28*SZPTR+2872*4]

; Values used in PFA-6
XMM_P866		EQU	XPTR [AD_BASE+28*SZPTR+2876*4]
XMM_BIGVAL_NEG		EQU	XPTR [AD_BASE+28*SZPTR+2880*4]
CARRY_ADJUST1_HI	EQU	QPTR [AD_BASE+28*SZPTR+2884*4]
CARRY_ADJUST1_LO	EQU	QPTR [AD_BASE+28*SZPTR+2886*4]
XMM_P924		EQU	XPTR [AD_BASE+28*SZPTR+2888*4]
XMM_P383		EQU	XPTR [AD_BASE+28*SZPTR+2892*4]

; Values used in old PFA-7
XMM_M358		EQU	XPTR [AD_BASE+28*SZPTR+2896*4]
XMM_P404		EQU	XPTR [AD_BASE+28*SZPTR+2900*4]
XMM_P445		EQU	XPTR [AD_BASE+28*SZPTR+2904*4]
XMM_P180		EQU	XPTR [AD_BASE+28*SZPTR+2908*4]
; Values used in new and old PFA-7
XMM_P975		EQU	XPTR [AD_BASE+28*SZPTR+2912*4]
XMM_P623		EQU	XPTR [AD_BASE+28*SZPTR+2916*4]
; Values used in new PFA-7 (28-reals)
XMM_P901		EQU	XPTR [AD_BASE+28*SZPTR+2920*4]
XMM_P782		EQU	XPTR [AD_BASE+28*SZPTR+2924*4]
XMM_P434		EQU	XPTR [AD_BASE+28*SZPTR+2928*4]
XMM_P223		EQU	XPTR [AD_BASE+28*SZPTR+2932*4]

; Values used in generic modular reduction
COPYZERO		EQU	DPTR [AD_BASE+28*SZPTR+2936*4]

B_IS_2			EQU	DPTR [AD_BASE+28*SZPTR+2944*4]
NUMARG			EQU	DPTR [AD_BASE+28*SZPTR+2945*4]
ZPAD_INVERSE_K6		EQU	QPTR [AD_BASE+28*SZPTR+2946*4]

; Values used in optimizing code
ASM_TIMERS		EQU	PPTR [AD_BASE+28*SZPTR+2948*4]

; Values used only in very large pass2 cases
sincos11		EQU	PPTR [AD_BASE+29*SZPTR+2948*4]
sincos12		EQU	PPTR [AD_BASE+30*SZPTR+2948*4]

; Values used in zero padded FFTs
zpad_addr		EQU	PPTR [AD_BASE+31*SZPTR+2948*4]

FFTLEN			EQU	DPTR [AD_BASE+32*SZPTR+2948*4]
ZPAD_TYPE		EQU	DPTR [AD_BASE+32*SZPTR+2949*4]
BIGLIT_INCR2		EQU	DPTR [AD_BASE+32*SZPTR+2950*4]
BIGLIT_INCR4		EQU	DPTR [AD_BASE+32*SZPTR+2951*4]

ZPAD_K6_HI		EQU	QPTR [AD_BASE+32*SZPTR+2952*4]
ZPAD_K6_MID		EQU	QPTR [AD_BASE+32*SZPTR+2954*4]

ZPAD_K6_LO		EQU	QPTR [AD_BASE+32*SZPTR+2956*4]
ZPAD_SHIFT6		EQU	QPTR [AD_BASE+32*SZPTR+2958*4]

ZPAD_INVERSE_K5		EQU	QPTR [AD_BASE+32*SZPTR+2960*4]
ZPAD_K5_HI		EQU	QPTR [AD_BASE+32*SZPTR+2962*4]

ZPAD_K5_MID		EQU	QPTR [AD_BASE+32*SZPTR+2964*4]
ZPAD_K5_LO		EQU	QPTR [AD_BASE+32*SZPTR+2966*4]

ZPAD_SHIFT5		EQU	QPTR [AD_BASE+32*SZPTR+2968*4]
ZPAD_INVERSE_K4		EQU	QPTR [AD_BASE+32*SZPTR+2970*4]

ZPAD_K4_HI		EQU	QPTR [AD_BASE+32*SZPTR+2972*4]
ZPAD_K4_MID		EQU	QPTR [AD_BASE+32*SZPTR+2974*4]

ZPAD_K4_LO		EQU	QPTR [AD_BASE+32*SZPTR+2976*4]
ZPAD_SHIFT4		EQU	QPTR [AD_BASE+32*SZPTR+2978*4]

ZPAD_INVERSE_K3		EQU	QPTR [AD_BASE+32*SZPTR+2980*4]
ZPAD_K3_HI		EQU	QPTR [AD_BASE+32*SZPTR+2982*4]

ZPAD_K3_MID		EQU	QPTR [AD_BASE+32*SZPTR+2984*4]
ZPAD_K3_LO		EQU	QPTR [AD_BASE+32*SZPTR+2986*4]

ZPAD_SHIFT3		EQU	QPTR [AD_BASE+32*SZPTR+2988*4]
ZPAD_INVERSE_K2		EQU	QPTR [AD_BASE+32*SZPTR+2990*4]

ZPAD_K2_HI		EQU	QPTR [AD_BASE+32*SZPTR+2992*4]
ZPAD_K2_MID		EQU	QPTR [AD_BASE+32*SZPTR+2994*4]

ZPAD_K2_LO		EQU	QPTR [AD_BASE+32*SZPTR+2996*4]
ZPAD_SHIFT2		EQU	QPTR [AD_BASE+32*SZPTR+2998*4]

ZPAD_K1_HI		EQU	QPTR [AD_BASE+32*SZPTR+3000*4]
ZPAD_INVERSE_K1		EQU	QPTR [AD_BASE+32*SZPTR+3002*4]

ZPAD_K1_LO		EQU	QPTR [AD_BASE+32*SZPTR+3004*4]
ZPAD_SHIFT1		EQU	QPTR [AD_BASE+32*SZPTR+3006*4]

ZPAD0			EQU	QPTR [AD_BASE+32*SZPTR+3008*4]
ZPAD1			EQU	QPTR [AD_BASE+32*SZPTR+3010*4]

ZPAD2			EQU	QPTR [AD_BASE+32*SZPTR+3012*4]
ZPAD3			EQU	QPTR [AD_BASE+32*SZPTR+3014*4]

ZPAD4			EQU	QPTR [AD_BASE+32*SZPTR+3016*4]
ZPAD5			EQU	QPTR [AD_BASE+32*SZPTR+3018*4]

ZPAD6			EQU	QPTR [AD_BASE+32*SZPTR+3020*4]
ZPAD7			EQU	QPTR [AD_BASE+32*SZPTR+3022*4]

; Values used in both zero pad and mulbyconst
XMM_BIGBIGVAL		EQU	XPTR [AD_BASE+32*SZPTR+3024*4]

; Values used in mulbyconst
XMM_MULCONST		EQU	XPTR [AD_BASE+32*SZPTR+3028*4]

; Values used in zero pad with a mulbyconst
XMM_K_TIMES_MULCONST_LO	EQU	XPTR [AD_BASE+32*SZPTR+3032*4]
XMM_K_TIMES_MULCONST_HI EQU	XPTR [AD_BASE+32*SZPTR+3036*4]
XMM_MINUS_C_TIMES_MULCONST EQU	XPTR [AD_BASE+32*SZPTR+3040*4]
XMM_K_TIMES_MULCONST_HI_1 EQU	XPTR [AD_BASE+32*SZPTR+3044*4]
XMM_K_TIMES_MULCONST_HI_2 EQU	XPTR [AD_BASE+32*SZPTR+3048*4]

; Values used in zero pad without mulbyconst
XMM_K_LO		EQU	XPTR [AD_BASE+32*SZPTR+3052*4]
XMM_K_HI		EQU	XPTR [AD_BASE+32*SZPTR+3056*4]
XMM_K_HI_1		EQU	XPTR [AD_BASE+32*SZPTR+3060*4]
XMM_K_HI_2		EQU	XPTR [AD_BASE+32*SZPTR+3064*4]

; Values used in normalization when k != 1.0
INVERSE_K		EQU	QPTR [AD_BASE+32*SZPTR+3068*4]
K			EQU	QPTR [AD_BASE+32*SZPTR+3070*4]			;; SSE2 code only
K_HI			EQU	QPTR [AD_BASE+32*SZPTR+3070*4]			;; x87 code only

TWO_TO_17		EQU	QPTR [AD_BASE+32*SZPTR+3072*4]			;; SSE2 code only
K_LO			EQU	QPTR [AD_BASE+32*SZPTR+3072*4]			;; x87 code only
CARRY_ADJUST1		EQU	QPTR [AD_BASE+32*SZPTR+3074*4]

CARRY_ADJUST2		EQU	QPTR [AD_BASE+32*SZPTR+3076*4]
CARRY_ADJUST3		EQU	QPTR [AD_BASE+32*SZPTR+3078*4]

CARRY_ADJUST4		EQU	QPTR [AD_BASE+32*SZPTR+3080*4]
CARRY_ADJUST5		EQU	QPTR [AD_BASE+32*SZPTR+3082*4]

CARRY_ADJUST6		EQU	QPTR [AD_BASE+32*SZPTR+3084*4]
HIGH_WORD1_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3086*4]
HIGH_WORD2_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3087*4]

HIGH_WORD3_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3088*4]
HIGH_SCRATCH1_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3089*4]
HIGH_SCRATCH2_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3090*4]
HIGH_SCRATCH3_OFFSET	EQU	DPTR [AD_BASE+32*SZPTR+3091*4]

; Saved reg, argument pointers
SAVED_RSP		EQU	PPTR [AD_BASE+32*SZPTR+3092*4]
SRCARG			EQU	PPTR [AD_BASE+33*SZPTR+3092*4]
SRC2ARG			EQU	PPTR [AD_BASE+34*SZPTR+3092*4]
DEST2ARG		EQU	PPTR [AD_BASE+35*SZPTR+3092*4]

; Values used in add/sub
normval2		EQU	PPTR [AD_BASE+36*SZPTR+3092*4]
normval3		EQU	PPTR [AD_BASE+37*SZPTR+3092*4]
ZPAD_WORD5_OFFSET	EQU	PPTR [AD_BASE+38*SZPTR+3092*4]
ZPAD_WORD5_RBP_OFFSET	EQU	PPTR [AD_BASE+39*SZPTR+3092*4]

; Values only used in one pass ffts

normcount1		EQU	DPTR [AD_BASE+40*SZPTR+3092*4]
count2			EQU	DPTR [AD_BASE+40*SZPTR+3093*4]
count3			EQU	DPTR [AD_BASE+40*SZPTR+3094*4]
count4			EQU	DPTR [AD_BASE+40*SZPTR+3095*4]

count5			EQU	DPTR [AD_BASE+40*SZPTR+3096*4]

; Values used in x87 FFTs
HALF			EQU	DPTR [AD_BASE+40*SZPTR+3097*4]
BIGVAL			EQU	DPTR [AD_BASE+40*SZPTR+3098*4]
BIGBIGVAL		EQU	DPTR [AD_BASE+40*SZPTR+3099*4]

SQRTHALF		EQU	QPTR [AD_BASE+40*SZPTR+3100*4]
MINUS_C			EQU	QPTR [AD_BASE+40*SZPTR+3102*4]

ttmp_ff_inv		EQU	QPTR [AD_BASE+40*SZPTR+3104*4]
P309			EQU	QPTR [AD_BASE+40*SZPTR+3106*4]

M809			EQU	QPTR [AD_BASE+40*SZPTR+3108*4]
M262			EQU	QPTR [AD_BASE+40*SZPTR+3110*4]

M382			EQU	QPTR [AD_BASE+40*SZPTR+3112*4]
P951			EQU	QPTR [AD_BASE+40*SZPTR+3114*4]

P588			EQU	QPTR [AD_BASE+40*SZPTR+3116*4]
M162			EQU	QPTR [AD_BASE+40*SZPTR+3118*4]

P618			EQU	QPTR [AD_BASE+40*SZPTR+3120*4]
P623			EQU	QPTR [AD_BASE+40*SZPTR+3122*4]

M358			EQU	QPTR [AD_BASE+40*SZPTR+3124*4]
P404			EQU	QPTR [AD_BASE+40*SZPTR+3126*4]

P975			EQU	QPTR [AD_BASE+40*SZPTR+3128*4]
P445			EQU	QPTR [AD_BASE+40*SZPTR+3130*4]

P180			EQU	QPTR [AD_BASE+40*SZPTR+3132*4]
M223			EQU	QPTR [AD_BASE+40*SZPTR+3134*4]

M901			EQU	QPTR [AD_BASE+40*SZPTR+3136*4]
M691			EQU	QPTR [AD_BASE+40*SZPTR+3138*4]

P866			EQU	QPTR [AD_BASE+40*SZPTR+3140*4]
P433			EQU	QPTR [AD_BASE+40*SZPTR+3142*4]

P577			EQU	QPTR [AD_BASE+40*SZPTR+3144*4]
P25			EQU	DPTR [AD_BASE+40*SZPTR+3146*4]
P75			EQU	DPTR [AD_BASE+40*SZPTR+3147*4]

P3			EQU	DPTR [AD_BASE+40*SZPTR+3148*4]

THREAD_NUM		EQU	DPTR [AD_BASE+40*SZPTR+3149*4]
DATA_ADDR		EQU	PPTR [AD_BASE+40*SZPTR+3150*4]
DATA_PREFETCH		EQU	PPTR [AD_BASE+41*SZPTR+3150*4]
PREMULT_ADDR		EQU	PPTR [AD_BASE+42*SZPTR+3150*4]
PREMULT_PREFETCH	EQU	PPTR [AD_BASE+43*SZPTR+3150*4]
GWDATA			EQU	PPTR [AD_BASE+44*SZPTR+3150*4]
PASS1_WAKE_UP_THREADS	EQU	PPTR [AD_BASE+45*SZPTR+3150*4]
PASS1_WAIT_FOR_CARRIES	EQU	PPTR [AD_BASE+46*SZPTR+3150*4]
PASS1_DONE_WITH_CARRIES	EQU	PPTR [AD_BASE+47*SZPTR+3150*4]
PASS1_GET_NEXT_BLOCK	EQU	PPTR [AD_BASE+48*SZPTR+3150*4]
PASS2_WAKE_UP_THREADS	EQU	PPTR [AD_BASE+49*SZPTR+3150*4]
PASS2_GET_NEXT_BLOCK	EQU	PPTR [AD_BASE+50*SZPTR+3150*4]
THREAD_WORK_ROUTINE	EQU	PPTR [AD_BASE+51*SZPTR+3150*4]
THIS_BLOCK		EQU	DPTR [AD_BASE+52*SZPTR+3150*4]
NEXT_BLOCK		EQU	DPTR [AD_BASE+52*SZPTR+3151*4]
LAST_PASS1_BLOCK	EQU	DPTR [AD_BASE+52*SZPTR+3152*4]

;;unused_int32		EQU	DPTR [AD_BASE+52*SZPTR+3153*4]
DBLARG			EQU	QPTR [AD_BASE+52*SZPTR+3154*4]
CARRY_ADJUST7		EQU	QPTR [AD_BASE+52*SZPTR+3156*4]
